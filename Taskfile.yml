# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
# SPDX-License-Identifier: Apache-2.0

version: "3"

vars:
  REGISTRY: ghcr.io
  NAMESPACE: broadsage
  BUILD_DATE: '{{now | date "2006-01-02T15:04:05Z"}}'
  GIT_COMMIT:
    sh: git rev-parse --short HEAD
  BUILD_PLATFORMS: linux/amd64,linux/arm64

tasks:
  build:
    desc: "Build container images"
    vars:
      CONTAINER: '{{.CONTAINER | default "nginx"}}'
      VERSION:
        sh: grep -r "ARG.*VERSION=" broadsage/{{.CONTAINER}}/*/debian-*/Dockerfile | head -1 | cut -d'"' -f2 | cut -d'=' -f2
    cmds:
      - task: build-single
        vars:
          CONTAINER: "{{.CONTAINER}}"
          VERSION: "{{.VERSION}}"

  build-single:
    desc: "Build single container with security scanning"
    vars:
      CONTAINER: "{{.CONTAINER}}"
      VERSION: "{{.VERSION}}"
      IMAGE_NAME: "{{.REGISTRY}}/{{.NAMESPACE}}/{{.CONTAINER}}"
      BUILD_CONTEXT: broadsage/{{.CONTAINER}}/1.29/debian-12
    cmds:
      - echo "Building {{.CONTAINER}} version {{.VERSION}}"
      - |
        docker buildx build \
          --platform {{.BUILD_PLATFORMS}} \
          --build-arg BUILDDATE={{.BUILD_DATE}} \
          --build-arg VERSION={{.VERSION}} \
          --build-arg REVISION={{.GIT_COMMIT}} \
          --tag {{.IMAGE_NAME}}:{{.VERSION}} \
          --tag {{.IMAGE_NAME}}:latest \
          --load \
          {{.BUILD_CONTEXT}}
      - task: security-scan
        vars:
          IMAGE: "{{.IMAGE_NAME}}:{{.VERSION}}"
          CONTAINER: "{{.CONTAINER}}"

  security-scan:
    desc: "Run comprehensive security scanning"
    vars:
      IMAGE: "{{.IMAGE}}"
      CONTAINER: "{{.CONTAINER}}"
    cmds:
      - echo "üîí Running security scans on {{.IMAGE}}"

      # Trivy vulnerability scan
      - |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd)/reports:/reports \
          aquasec/trivy:latest image \
          --format sarif \
          --output /reports/{{.CONTAINER}}-trivy.sarif \
          --severity CRITICAL,HIGH,MEDIUM,LOW \
          {{.IMAGE}}

      # Grype vulnerability scan
      - |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd)/reports:/reports \
          anchore/grype:latest \
          {{.IMAGE}} \
          -o sarif > reports/{{.CONTAINER}}-grype.sarif

      # SBOM generation with Syft
      - |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd)/reports:/reports \
          anchore/syft:latest \
          {{.IMAGE}} \
          -o spdx-json > reports/{{.CONTAINER}}-sbom.spdx.json

      # Docker Scout (if available)
      - |
        if command -v docker-scout >/dev/null 2>&1; then
          docker scout cves {{.IMAGE}} --format sarif --output reports/{{.CONTAINER}}-scout.sarif || true
        fi

      - task: scan-summary
        vars:
          CONTAINER: "{{.CONTAINER}}"

  scan-summary:
    desc: "Generate security scan summary"
    vars:
      CONTAINER: "{{.CONTAINER}}"
    cmds:
      - |
        echo "üìä Security Scan Summary for {{.CONTAINER}}"
        echo "=================================="

        if [ -f "reports/{{.CONTAINER}}-trivy.sarif" ]; then
          echo "üîç Trivy Results:"
          jq -r '.runs[0].results | length' reports/{{.CONTAINER}}-trivy.sarif 2>/dev/null | xargs -I {} echo "  - Total issues: {}"
          
          critical=$(jq -r '.runs[0].results[]? | select(.level=="error") | .ruleId' reports/{{.CONTAINER}}-trivy.sarif 2>/dev/null | wc -l)
          high=$(jq -r '.runs[0].results[]? | select(.level=="warning") | .ruleId' reports/{{.CONTAINER}}-trivy.sarif 2>/dev/null | wc -l)
          
          echo "  - Critical: $critical"
          echo "  - High: $high"
          
          if [ "$critical" -gt 0 ]; then
            echo "‚ùå CRITICAL vulnerabilities found! Build should be blocked."
            exit 1
          fi
        fi

  sign-image:
    desc: "Sign container image with Cosign"
    vars:
      IMAGE: "{{.IMAGE}}"
    cmds:
      - echo "‚úçÔ∏è Signing image {{.IMAGE}}"
      - cosign sign --yes {{.IMAGE}}
      - cosign sign --yes {{.IMAGE}}-attestation

  generate-attestation:
    desc: "Generate supply chain attestation"
    vars:
      IMAGE: "{{.IMAGE}}"
      CONTAINER: "{{.CONTAINER}}"
    cmds:
      - |
        cosign attest --yes --predicate reports/{{.CONTAINER}}-sbom.spdx.json {{.IMAGE}}

  push:
    desc: "Push signed images to registry"
    vars:
      CONTAINER: '{{.CONTAINER | default "nginx"}}'
      IMAGE_NAME: "{{.REGISTRY}}/{{.NAMESPACE}}/{{.CONTAINER}}"
    cmds:
      - echo "üì§ Pushing {{.IMAGE_NAME}}"
      - docker push {{.IMAGE_NAME}} --all-tags
      - task: sign-image
        vars:
          IMAGE: "{{.IMAGE_NAME}}:latest"
      - task: generate-attestation
        vars:
          IMAGE: "{{.IMAGE_NAME}}:latest"
          CONTAINER: "{{.CONTAINER}}"

  test:
    desc: "Run comprehensive tests"
    vars:
      CONTAINER: '{{.CONTAINER | default "nginx"}}'
      IMAGE_NAME: "{{.REGISTRY}}/{{.NAMESPACE}}/{{.CONTAINER}}"
    cmds:
      - task: test-functional
        vars:
          IMAGE: "{{.IMAGE_NAME}}:latest"
      - task: test-security
        vars:
          IMAGE: "{{.IMAGE_NAME}}:latest"

  test-functional:
    desc: "Run functional tests"
    vars:
      IMAGE: "{{.IMAGE}}"
    cmds:
      - echo "üß™ Running functional tests on {{.IMAGE}}"
      - |
        # Start container
        CONTAINER_ID=$(docker run -d -p 8080:8080 {{.IMAGE}})

        # Wait for startup
        sleep 5

        # Test HTTP response
        if curl -f http://localhost:8080/ >/dev/null 2>&1; then
          echo "‚úÖ HTTP test passed"
        else
          echo "‚ùå HTTP test failed"
          docker logs $CONTAINER_ID
          docker stop $CONTAINER_ID
          exit 1
        fi

        # Cleanup
        docker stop $CONTAINER_ID
        docker rm $CONTAINER_ID

  test-security:
    desc: "Run security-specific tests"
    vars:
      IMAGE: "{{.IMAGE}}"
    cmds:
      - echo "üîê Running security tests on {{.IMAGE}}"
      - |
        # Check if running as non-root
        USER_ID=$(docker run --rm {{.IMAGE}} id -u)
        if [ "$USER_ID" != "1001" ]; then
          echo "‚ùå Container not running as expected user (1001)"
          exit 1
        fi
        echo "‚úÖ Non-root user test passed"

        # Check for SUID/SGID binaries
        SUID_COUNT=$(docker run --rm {{.IMAGE}} find / -perm /6000 -type f 2>/dev/null | wc -l)
        if [ "$SUID_COUNT" -gt 0 ]; then
          echo "‚ö†Ô∏è Found $SUID_COUNT SUID/SGID binaries"
          docker run --rm {{.IMAGE}} find / -perm /6000 -type f 2>/dev/null
        else
          echo "‚úÖ No SUID/SGID binaries found"
        fi

  clean:
    desc: "Clean up build artifacts"
    cmds:
      - rm -rf reports/
      - docker system prune -f
      - docker buildx prune -f

  ci:
    desc: "Full CI pipeline"
    vars:
      CONTAINER: '{{.CONTAINER | default "nginx"}}'
    cmds:
      - task: build
        vars:
          CONTAINER: "{{.CONTAINER}}"
      - task: test
        vars:
          CONTAINER: "{{.CONTAINER}}"
      - echo "üéâ CI pipeline completed successfully for {{.CONTAINER}}"

  setup-dev:
    desc: "Setup development environment"
    cmds:
      - mkdir -p reports
      - |
        echo "Setting up development environment..."
        if ! command -v docker >/dev/null 2>&1; then
          echo "‚ùå Docker not found. Please install Docker."
          exit 1
        fi

        if ! docker buildx version >/dev/null 2>&1; then
          echo "‚ùå Docker Buildx not found. Please install Docker Buildx."
          exit 1
        fi

        echo "‚úÖ Development environment ready"
        echo "Available commands:"
        task --list
