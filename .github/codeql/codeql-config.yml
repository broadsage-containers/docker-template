# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

# CodeQL Configuration for Container Security Analysis
# Optimized for Docker container projects with shell scripts, Python, and JavaScript

name: "Container Security CodeQL Configuration"

# Use default queries with enhanced security focus
disable-default-queries: false

# Note: Query suites are specified in the workflow file for better control

# Container-focused path configuration
paths-ignore:
  # Documentation and metadata
  - "/.github/"
  - "/docs/"
  - "/megalinter-reports/"
  - "**/*.md"
  - "**/*.txt"
  - "**/LICENSE*"
  - "**/*.toml"
  - "**/CHANGELOG*"
  - "**/AUTHORS*"
  - "**/CONTRIBUTORS*"
  
  # Build artifacts and caches
  - "**/node_modules/"
  - "**/.npm/"
  - "**/.cache/"
  - "**/dist/"
  - "**/build/"
  - "**/__pycache__/"
  - "**/*.pyc"
  - "**/.pytest_cache/"
  
  # CI/CD artifacts (except security configs)
  - "**/.git/"
  - "**/.gitignore"
  - "**/.dockerignore"
  
  # Exclude test data but include test scripts
  - "**/test-data/"
  - "**/fixtures/"
  - "**/*.fixture"

# Include container-specific paths
paths:
  # Container source files
  - "**/Dockerfile*"
  - "**/*.sh"
  - "**/*.bash"
  - "**/entrypoint*"
  - "**/scripts/"
  
  # Application source code
  - "**/*.py"
  - "**/*.js"
  - "**/*.ts"
  - "**/*.mjs"
  - "**/*.jsx"
  - "**/*.tsx"
  
  # Configuration files (security-relevant)
  - "**/*.yml"
  - "**/*.yaml"
  - "**/*.json"
  - "**/*.env"
  - "**/*.config.js"
  - "**/*.config.ts"
  
  # Include source directories
  - "/src/"
  - "/lib/"
  - "/app/"
  - "/scripts/"
  - "/broadsage/"
  - "/templates/"

# Language-specific configurations for containers
python:
  # Python container runtime analysis
  setup-python-dependencies: true
  python-executable: python3
  # Include container-specific Python patterns
  include-dependencies: false  # Avoid analyzing third-party deps in containers

javascript:
  # JavaScript/Node.js configuration
  setup-node-dependencies: true
  # Analyze JavaScript build scripts and container utilities
  include-dev-dependencies: false
  
# Container security packs configuration (Enterprise feature)
# Uncomment when enterprise features are available
# packs:
#   python:
#     - "codeql/python-queries@~0.9.0"
#     - "codeql/python-security@~0.2.0"
#   javascript:
#     - "codeql/javascript-queries@~0.7.0"
#     - "codeql/javascript-security@~0.2.0"

# Enhanced external repository configuration
external-repository-token: ${{ github.token }}

# Container-specific compilation settings
compile:
  # No compilation needed for container projects
  # Shell scripts and Python are interpreted
  # JavaScript might need building for complex projects
  
  # Example for TypeScript compilation in containers
  # javascript:
  #   - npm ci
  #   - npm run build

# Database configuration optimized for containers
database:
  # Faster cleanup for container projects
  cleanup-level: "light"
  
  # Finalize for better analysis
  finalize-dataset: true
  
  # Container-specific indexing
  include-generated-files: false
  
  # Optimize for shell script analysis
  shell-script-analysis: true

# Performance configuration for container analysis
analysis:
  # Optimize threads for container workloads
  threads: 0  # Auto-detect
  
  # Extended timeout for comprehensive container analysis
  timeout: 180
  
  # Memory optimization for large container projects
  memory-limit: "8G"
  
  # Enhanced container security analysis
  security-severity-threshold: "medium"
  
  # Include experimental container queries
  experimental-queries: ${{ env.CODEQL_ENABLE_EXPERIMENTAL }}

# Container-specific analysis filters
filters:
  # Focus on security-critical patterns
  severity:
    - "critical"
    - "high" 
    - "medium"
  
  # Container security categories
  categories:
    - "security"
    - "security/container"
    - "security/shell"
    - "security/secrets"
    - "security/injection"
    - "maintainability/security"
  
  # CWE categories relevant to containers
  cwe-categories:
    - "78"   # OS Command Injection
    - "79"   # Cross-site Scripting
    - "89"   # SQL Injection
    - "94"   # Code Injection
    - "200"  # Information Exposure
    - "209"  # Information Exposure Through Error Messages
    - "250"  # Execution with Unnecessary Privileges
    - "285"  # Improper Authorization
    - "287"  # Improper Authentication
    - "295"  # Improper Certificate Validation
    - "327"  # Use of a Broken Cryptographic Algorithm
    - "330"  # Use of Insufficiently Random Values
    - "338"  # Use of Cryptographically Weak PRNG
    - "377"  # Insecure Temporary File
    - "426"  # Untrusted Search Path
    - "502"  # Deserialization of Untrusted Data
    - "522"  # Insufficiently Protected Credentials
    - "611"  # Improper Restriction of XML External Entity Reference
    - "798"  # Use of Hard-coded Credentials
    - "829"  # Inclusion of Functionality from Untrusted Control Sphere
    - "916"  # Use of Password Hash With Insufficient Computational Effort
