# Copyright Broadcom, Inc. All Rights Reserved.
# SPDX-License-Identifier: APACHE-2.0

name: "[Support] Team Assignment and Notifications"

on:
  issues:
    types: [labeled]
  pull_request:
    types: [labeled, review_requested]

# Use restrictive default permissions
permissions:
  contents: read

jobs:
  team-assignment:
    runs-on: ubuntu-latest
    name: Auto-assign issues and notify teams
    # Job-level permissions for team assignment
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Assign based on labels
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const issue = context.payload.issue || context.payload.pull_request;
            const isIssue = !!context.payload.issue;
            const labels = issue.labels.map(label => label.name);

            // Team assignment rules based on labels
            const teamAssignments = {
              'security': {
                team: 'security-team',
                assignees: [], // Add specific security team members
                message: 'üîê **Security Team Notified**\n\nThis issue has been flagged for security review and the security team has been notified.'
              },
              'infrastructure': {
                team: 'infra-team', 
                assignees: [], // Add infrastructure team members
                message: 'üèóÔ∏è **Infrastructure Team Notified**\n\nThis infrastructure-related issue has been assigned to the infrastructure team.'
              },
              'documentation': {
                team: 'docs-team',
                assignees: [], // Add docs team members  
                message: 'üìö **Documentation Team Notified**\n\nThis documentation issue has been assigned to the documentation team.'
              },
              'priority-critical': {
                team: 'on-call-team',
                assignees: [], // Add on-call team members
                message: 'üö® **Critical Priority - On-Call Team Notified**\n\nThis critical issue has been escalated to the on-call team for immediate attention.'
              }
            };

            // Check for team assignment based on labels
            for (const label of labels) {
              if (teamAssignments[label]) {
                const assignment = teamAssignments[label];
                
                // Add comment with team notification
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: assignment.message
                });
                
                // If specific assignees are configured, assign them
                if (assignment.assignees.length > 0) {
                  await github.rest.issues.addAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    assignees: assignment.assignees
                  });
                }
                
                break; // Only assign to one team
              }
            }

      - name: Notify for community contributions
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: github.event_name == 'pull_request'
        with:
          script: |
            const pr = context.payload.pull_request;
            const author = pr.user.login;
            const labels = pr.labels.map(label => label.name);

            // Check if this is an external contribution (not from org members)
            let isExternalContribution = true;
            try {
              await github.rest.orgs.getMembershipForUser({
                org: context.repo.owner,
                username: author
              });
              isExternalContribution = false;
            } catch (error) {
              // User is not an org member, so it's external
            }

            if (isExternalContribution && !labels.includes('dependencies')) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `üåü **Community Contribution Detected**

                Thank you @${author} for this external contribution! 

                **For Maintainers:**
                - [ ] Review the changes carefully
                - [ ] Ensure CI passes and tests are adequate  
                - [ ] Check for any security implications
                - [ ] Consider adding the contributor to CONTRIBUTORS.md
                - [ ] Provide constructive feedback

                **Community contributions make this project better!** üôè

                ---
                *This is an automated notification for maintainer awareness.*`
              });
            }

      - name: Handle urgent notifications
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const issue = context.payload.issue || context.payload.pull_request;
            const labels = issue.labels.map(label => label.name);

            // Handle critical/urgent issues
            if (labels.includes('priority-critical')) {
              // Create a summary for urgent notification
              const summary = `üö® **CRITICAL ISSUE ALERT**

              **Issue:** #${issue.number} - ${issue.title}
              **Reporter:** @${issue.user.login}
              **Created:** ${new Date(issue.created_at).toLocaleString()}
              **Labels:** ${labels.join(', ')}

              **Quick Actions:**
              - [View Issue](${issue.html_url})
              - [Assign Team Member](${issue.html_url})
              - [Update Priority](${issue.html_url})

              ‚ö° **This requires immediate attention!**`;
              
              console.log(summary);
              
              // You can extend this to send notifications to:
              // - Slack channels
              // - Discord webhooks  
              // - Email notifications
              // - PagerDuty alerts
              // - Microsoft Teams
            }

            // Handle security issues
            if (labels.includes('security')) {
              console.log(`üîê Security issue detected: #${issue.number}`);
              
              // Add security notice
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `üîí **Security Issue Protocol**

                This issue has been flagged as security-related. Please note:

                **For Security Team:**
                - [ ] Assess severity and impact
                - [ ] Determine if this requires a security advisory
                - [ ] Consider if the repository should be made private temporarily
                - [ ] Follow responsible disclosure practices

                **For Reporters:**
                - ü§ê Please avoid sharing exploitation details in public
                - üìß Consider using our security email for sensitive reports
                - ‚è±Ô∏è We'll provide updates within 48 hours

                **Security is our priority** - thank you for reporting responsibly! üõ°Ô∏è`
              });
            }
