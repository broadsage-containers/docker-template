name: '[CI/CD] CI Pipeline'

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build all containers'
        required: false
        default: false
        type: boolean
      containers_filter:
        description: 'Comma-separated list of containers to build (e.g., nginx,apache)'
        required: false
        type: string
      push_images:
        description: 'Push images to registry'
        required: false
        default: false
        type: boolean
  push:
    branches: [main]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 0'

permissions:
  contents: read
  packages: write
  pull-requests: write
  security-events: write
  statuses: write

# Prevent concurrent builds for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  BUILD_PLATFORMS: linux/amd64,linux/arm64
  COSIGN_EXPERIMENTAL: 1

jobs:
  # Matrix generation job to discover containers to build
  discover-containers:
    runs-on: ubuntu-latest
    name: Discover Modified Containers
    if: |
      (github.event_name == 'push' || 
       github.event_name == 'workflow_dispatch' ||
       github.event_name == 'schedule')
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      has_changes: ${{ steps.generate-matrix.outputs.has_changes }}
    permissions:
      contents: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # For push events, get last 2 commits for comparison
          fetch-depth: ${{ github.event_name == 'push' && 2 || 0 }}
          ref: ${{ github.ref }}
          repository: ${{ github.repository }}

      - name: Get changed files
        if: github.event_name != 'schedule' && github.event_name != 'workflow_dispatch'
        id: changed-files
        uses: tj-actions/changed-files@2d756ea4c53f7f6b397767d8723b3a10a9f35bf2 # v44.0.0
        with:
          files: |
            broadsage/**
          files_ignore: |
            **/*.md
            **/*.txt
            **/LICENSE
            .github/**

      - name: Generate build matrix
        id: generate-matrix
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          FORCE_BUILD: ${{ github.event.inputs.force_build }}
          CONTAINERS_FILTER: ${{ github.event.inputs.containers_filter }}
        run: |
          set -euo pipefail
          
          echo "Debug: Changed files: $CHANGED_FILES"
          echo "Debug: Force build: $FORCE_BUILD"
          echo "Debug: Containers filter: $CONTAINERS_FILTER"
          echo "Debug: Event name: ${{ github.event_name }}"
          
          # Initialize containers array
          containers=()
          
          if [[ "$FORCE_BUILD" == "true" || "${{ github.event_name }}" == "schedule" ]]; then
            echo "Force build or scheduled run - discovering all containers"
            containers=($(find broadsage -name "Dockerfile" -type f | grep -E "broadsage/[^/]+/[^/]+/[^/]+/Dockerfile$" | sed 's|/Dockerfile||g' | sort))
          elif [[ -n "$CONTAINERS_FILTER" ]]; then
            echo "Using container filter: $CONTAINERS_FILTER"
            IFS=',' read -ra FILTER_ARRAY <<< "$CONTAINERS_FILTER"
            for filter in "${FILTER_ARRAY[@]}"; do
              filter=$(echo "$filter" | xargs) # trim whitespace
              found_containers=($(find broadsage -name "Dockerfile" -type f | grep -E "broadsage/$filter/[^/]+/[^/]+/Dockerfile$" | sed 's|/Dockerfile||g' | sort))
              containers+=("${found_containers[@]}")
            done
          else
            echo "Discovering containers from changed files"
            
            # Regular event handling for push events
            for file in $CHANGED_FILES; do
              # Extract container path pattern: broadsage/{app}/{version}/{platform}
              if [[ "$file" =~ ^broadsage/([^/]+)/([^/]+)/([^/]+)/ ]]; then
                container_path="broadsage/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}/${BASH_REMATCH[3]}"
                if [[ -f "$container_path/Dockerfile" ]]; then
                  containers+=("$container_path")
                fi
              fi
            done
          fi
          
          # Remove duplicates and create matrix
          if [[ ${#containers[@]} -gt 0 ]]; then
            unique_containers=($(printf "%s\n" "${containers[@]}" | sort -u))
            echo "Found containers to build: ${unique_containers[*]}"
            
            # Generate JSON matrix
            matrix_json="["
            for i in "${!unique_containers[@]}"; do
              container="${unique_containers[$i]}"
              app_name=$(echo "$container" | cut -d'/' -f2)
              version=$(echo "$container" | cut -d'/' -f3)
              platform=$(echo "$container" | cut -d'/' -f4)
              
              if [[ $i -gt 0 ]]; then
                matrix_json+=","
              fi
              
              matrix_json+="{\"container\":\"$container\",\"app\":\"$app_name\",\"version\":\"$version\",\"platform\":\"$platform\"}"
            done
            matrix_json+="]"
            
            echo "matrix={\"include\":$matrix_json}" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Generated matrix: $matrix_json"
          else
            echo "No containers found to build"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

  # Lint and validate Dockerfiles
  lint-dockerfiles:
    runs-on: ubuntu-latest
    name: Lint Dockerfiles
    needs: discover-containers
    if: needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover-containers.outputs.matrix) }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          ref: ${{ github.ref }}
          repository: ${{ github.repository }}

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: ${{ matrix.container }}/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@2d92b76c45b91eb80fc44c74ce3fce0ee94e8f9d # v3.30.0
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint

  # Build and test container images
  build-and-test:
    runs-on: ubuntu-latest
    name: Build & Test
    needs: [discover-containers, lint-dockerfiles]
    if: needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJSON(needs.discover-containers.outputs.matrix) }}
    outputs:
      images: ${{ steps.build-metadata.outputs.images }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 1
          ref: ${{ github.ref }}
          repository: ${{ github.repository }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Log in to Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build metadata
        id: build-metadata
        env:
          CONTAINER: ${{ matrix.container }}
          APP: ${{ matrix.app }}
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          set -euo pipefail
          
          # Generate image name
          image_name="${REGISTRY}/${IMAGE_NAMESPACE}/${APP}"
          
          # Generate tags
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Production tags for main branch
            tags="${image_name}:${VERSION}-${PLATFORM}"
            tags="${tags},${image_name}:${VERSION}"
            if [[ "${VERSION}" =~ ^[0-9]+\.[0-9]+ ]]; then
              major_version=$(echo "${VERSION}" | cut -d'.' -f1)
              tags="${tags},${image_name}:${major_version}"
            fi
            tags="${tags},${image_name}:latest"
          else
            # Development tags for other events
            short_sha=$(echo "${{ github.sha }}" | cut -c1-7)
            tags="${image_name}:${VERSION}-${PLATFORM}-${short_sha}"
            tags="${tags},${image_name}:dev-${short_sha}"
          fi
          
          echo "image_name=${image_name}" >> $GITHUB_OUTPUT
          echo "tags=${tags}" >> $GITHUB_OUTPUT
          echo "images=${image_name}" >> $GITHUB_OUTPUT
          
          # Generate labels
          labels=$(cat <<EOF
          org.opencontainers.image.title=${APP}
          org.opencontainers.image.description=Enterprise-grade ${APP} container image
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${VERSION}
          org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=Apache-2.0
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.base.name=docker.io/bitnami/minideb:bookworm
          EOF
          )
          
          # Convert labels to single line for output
          labels_single_line=$(echo "$labels" | tr '\n' ',' | sed 's/,$//')
          echo "labels=${labels_single_line}" >> $GITHUB_OUTPUT
          
          echo "Generated metadata for ${CONTAINER}:"
          echo "  Image: ${image_name}"
          echo "  Tags: ${tags}"
          echo "  Labels: ${labels_single_line}"

      - name: Build Docker image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5.4.0
        id: build
        with:
          context: ${{ matrix.container }}
          file: ${{ matrix.container }}/Dockerfile
          platforms: ${{ env.BUILD_PLATFORMS }}
          push: false
          load: false
          tags: ${{ steps.build-metadata.outputs.tags }}
          labels: ${{ steps.build-metadata.outputs.labels }}
          cache-from: type=gha,scope=build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}
          outputs: type=image,name=${{ steps.build-metadata.outputs.image_name }},push=false

      - name: Load image for testing
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5.4.0
        with:
          context: ${{ matrix.container }}
          file: ${{ matrix.container }}/Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: test-image:latest
          cache-from: type=gha,scope=build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}
      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@b2933f565dbc598b29947660e66259e3c7bc8561 # 0.20.0
        with:
          image-ref: test-image:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Generate security report
        if: always()
        run: |
          set -euo pipefail
          
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "**Container:** ${{ matrix.container }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ steps.build-metadata.outputs.image_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f "trivy-results.sarif" ]]; then
            # Parse SARIF results
            critical_count=$(jq -r '.runs[0].results[]? | select(.level=="error") | .ruleId' trivy-results.sarif 2>/dev/null | wc -l || echo "0")
            high_count=$(jq -r '.runs[0].results[]? | select(.level=="warning") | .ruleId' trivy-results.sarif 2>/dev/null | wc -l || echo "0")
            
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $critical_count |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $high_count |" >> $GITHUB_STEP_SUMMARY
            
            if [[ "$critical_count" -gt 0 ]]; then
              echo "⚠️ **Critical vulnerabilities found!**" >> $GITHUB_STEP_SUMMARY
            elif [[ "$high_count" -gt 0 ]]; then
              echo "⚠️ **High severity vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **No critical or high severity vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Security scan failed**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Push to registry
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5.4.0
        id: push
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.push_images == 'true')
        with:
          context: ${{ matrix.container }}
          file: ${{ matrix.container }}/Dockerfile
          platforms: ${{ env.BUILD_PLATFORMS }}
          push: true
          tags: ${{ steps.build-metadata.outputs.tags }}
          labels: ${{ steps.build-metadata.outputs.labels }}
          cache-from: type=gha,scope=build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}
          outputs: type=registry,name=${{ steps.build-metadata.outputs.image_name }}

      - name: Set image digest output
        id: image-digest
        if: steps.push.outcome == 'success'
        run: |
          # Extract the primary image name and combine with digest
          image_name="${{ steps.build-metadata.outputs.image_name }}"
          digest="${{ steps.push.outputs.digest }}"
          image_ref="${image_name}@${digest}"
          echo "image_ref=${image_ref}" >> $GITHUB_OUTPUT
          echo "digest=${digest}" >> $GITHUB_OUTPUT

      - name: Install tools for signing and SBOM
        if: steps.push.outcome == 'success'
        run: |
          # Install Cosign
          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          sudo install cosign-linux-amd64 /usr/local/bin/cosign
          
          # Install Syft
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM and sign image
        if: steps.push.outcome == 'success'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          image_ref="${{ steps.image-digest.outputs.image_ref }}"
          
          # Generate SBOM
          syft "${image_ref}" -o spdx-json=sbom.spdx.json
          
          # Sign the image
          cosign sign --yes "${image_ref}"
          
          echo "✅ Generated SBOM and signed image: ${image_ref}"

      - name: Attest SBOM
        if: steps.push.outcome == 'success'
        uses: actions/attest-sbom@5026d3663739160db546203eeaffa6aa1c51a4d6 # v1.4.1
        with:
          subject-digest: ${{ steps.push.outputs.digest }}
          sbom-path: sbom.spdx.json
          push-to-registry: true

  # Comprehensive build summary
  build-summary:
    runs-on: ubuntu-latest
    name: Build Summary
    needs: [discover-containers, build-and-test]
    if: always()
    permissions:
      statuses: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Generate build summary
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { data: workflowRun } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            let state = 'success';
            let description = 'All containers built and tested successfully!';
            
            if ('${{ needs.discover-containers.result }}' !== 'success') {
              state = 'error';
              description = 'Container discovery failed';
            } else if ('${{ needs.discover-containers.outputs.has_changes }}' === 'false') {
              state = 'success';
              description = 'No containers to build';
            } else if ('${{ needs.build-and-test.result }}' !== 'success') {
              state = 'error';
              description = 'Container build or tests failed';
            }
            
            // Determine SHA for status
            const sha = context.payload.pull_request?.head.sha || context.sha;
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: state,
              target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              description: description,
              context: 'Enterprise Container Pipeline'
            });
            
            core.summary.addHeading('🚀 Enterprise Container Build Summary');
            core.summary.addTable([
              [{data: 'Status', header: true}, {data: 'Value', header: true}],
              ['Build Status', state === 'success' ? '✅ Success' : '❌ Failed'],
              ['Containers Changed', '${{ needs.discover-containers.outputs.has_changes }}'],
              ['Workflow Run', `[#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`],
              ['Triggered By', '${{ github.actor }}'],
              ['Event', '${{ github.event_name }}']
            ]);
            await core.summary.write();


