# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: "[Validation] Branch Naming Convention"

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
  push:
    branches-ignore:
      - main
      - master
      - develop
      - release/*
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Branch name to validate (optional - uses current branch if empty)"
        required: false
        type: string

# Use restrictive default permissions
permissions:
  contents: read

jobs:
  validate-branch-naming:
    runs-on: ubuntu-latest
    name: Validate Branch Naming Convention
    if: |
      (github.event_name == 'pull_request' && github.head_ref != '') ||
      (github.event_name == 'push' && !contains(github.ref, 'refs/heads/main') && !contains(github.ref, 'refs/heads/master') && !contains(github.ref, 'refs/heads/develop')) ||
      github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      pull-requests: write
      checks: write
      statuses: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Validate Branch Name
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ secrets.AUTOBOT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            // Get branch name from different event types
            let branchName = '';

            if (context.eventName === 'pull_request') {
              branchName = context.payload.pull_request.head.ref;
            } else if (context.eventName === 'push') {
              branchName = context.ref.replace('refs/heads/', '');
            } else if (context.eventName === 'workflow_dispatch' && '${{ github.event.inputs.branch_name }}') {
              branchName = '${{ github.event.inputs.branch_name }}';
            } else {
              branchName = context.ref.replace('refs/heads/', '');
            }

            console.log(`üîç Validating branch name: "${branchName}"`);

            // Define allowed branch naming patterns
            const patterns = [
              // Conventional commit types with slash separator
              /^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)\/[a-z0-9]+(?:-[a-z0-9]+)*$/,
              // With optional scope: feat/scope-description
              /^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)\/[a-z0-9]+(?:-[a-z0-9]+)*-[a-z0-9]+(?:-[a-z0-9]+)*$/,
              // Emergency/hotfix patterns
              /^(hotfix|emergency)\/[a-z0-9]+(?:-[a-z0-9]+)*$/,
              // Release branches
              /^release\/v?\d+\.\d+\.\d+(?:-[a-z0-9]+)?$/,
              // User feature branches (username/type/description)
              /^[a-z0-9]+(?:-[a-z0-9]+)*\/(feat|fix|docs|style|refactor|perf|test|chore|ci|build)\/[a-z0-9]+(?:-[a-z0-9]+)*$/,
              // Protected branches (these should be allowed)
              /^(main|master|develop|development)$/,
              // Dependabot branches
              /^dependabot\/.+$/,
              // GitHub action auto-generated branches
              /^github-actions\/.+$/
            ];

            const isValid = patterns.some(pattern => pattern.test(branchName));

            console.log(`‚úÖ Valid branch name: ${isValid}`);

            // Create status check
            const statusState = isValid ? 'success' : 'failure';
            const statusDescription = isValid 
              ? 'Branch name follows conventional naming convention'
              : 'Branch name does not follow conventional naming convention';

            if (context.eventName === 'pull_request') {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: statusState,
                description: statusDescription,
                context: 'branch-naming-validation'
              });
            }

            if (!isValid) {
              const allowedExamples = [
                '`feat/user-authentication`',
                '`fix/docker-build-issue`',
                '`docs/update-readme`',
                '`refactor/api-endpoints`',
                '`chore/update-dependencies`',
                '`test/integration-tests`',
                '`ci/github-actions`',
                '`build/webpack-config`',
                '`hotfix/critical-security-fix`',
                '`release/v1.2.3`',
                '`username/feat/new-feature`'
              ];

              const commentBody = `## ‚ùå Branch Naming Convention Issue

            Hello! üëã Your branch name doesn't follow our conventional naming format.

            ### üìã Required Format:
            Branches must follow one of these patterns:

            #### üéØ Standard Format:
            \`<type>/<description>\`
            - Types: \`feat\`, \`fix\`, \`docs\`, \`style\`, \`refactor\`, \`perf\`, \`test\`, \`chore\`, \`ci\`, \`build\`, \`revert\`
            - Description: lowercase, hyphen-separated words

            #### üö® Special Cases:
            - \`hotfix/<description>\` - For urgent fixes
            - \`release/v<version>\` - For release preparation
            - \`<username>/<type>/<description>\` - For user feature branches

            ### üìù Valid Examples:
            ${allowedExamples.map(example => `- ${example}`).join('\n')}

            ### ‚ùå Invalid Formats:
            - \`FEAT/user-auth\` (uppercase)
            - \`feature/user_auth\` (underscore, wrong type)
            - \`fix-bug\` (missing slash separator)
            - \`fix/User Authentication\` (spaces, mixed case)

            ### üîß Please rename your branch:
            \`\`\`bash
            git branch -m "${branchName}" "<type>/<description>"
            git push origin -u <type>/<description>
            git push origin --delete "${branchName}"
            \`\`\`

            **Current branch:** \`${branchName}\`

            ---
            üí° **Tip:** Choose the type that best describes your changes and use lowercase, hyphen-separated descriptions.`;

              if (context.eventName === 'pull_request') {
                // Check if a comment already exists
                const comments = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number
                });

                const existingComment = comments.data.find(comment => 
                  comment.user.type === 'Bot' && 
                  comment.body.includes('Branch Naming Convention Issue')
                );

                if (existingComment) {
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: existingComment.id,
                    body: commentBody
                  });
                } else {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.pull_request.number,
                    body: commentBody
                  });
                }
              }

              core.setFailed(`‚ùå Branch name "${branchName}" does not follow conventional naming convention`);
            } else {
              console.log(`‚úÖ Branch name "${branchName}" is valid`);
              
              // If this is a PR and there was a previous comment about branch naming, remove it
              if (context.eventName === 'pull_request') {
                try {
                  const comments = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.payload.pull_request.number
                  });

                  const branchNamingComments = comments.data.filter(comment => 
                    comment.user.type === 'Bot' && 
                    comment.body.includes('Branch Naming Convention Issue')
                  );

                  for (const comment of branchNamingComments) {
                    await github.rest.issues.deleteComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      comment_id: comment.id
                    });
                    console.log('üóëÔ∏è Removed previous branch naming comment');
                  }
                } catch (error) {
                  console.log('‚ÑπÔ∏è Could not remove previous comments (this is okay)');
                }
              }
            }

  # Job to suggest good branch names for invalid branches
  suggest-branch-names:
    runs-on: ubuntu-latest
    name: Suggest Branch Names
    if: failure() && (github.event_name == 'pull_request' || github.event_name == 'push')
    needs: validate-branch-naming
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Suggest Branch Names
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ secrets.AUTOBOT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const branchName = context.eventName === 'pull_request' 
              ? context.payload.pull_request.head.ref
              : context.ref.replace('refs/heads/', '');

            console.log(`ü§ñ Generating suggestions for branch: "${branchName}"`);

            // Generate suggestions based on common patterns
            const suggestions = [];
            const normalizedName = branchName
              .toLowerCase()
              .replace(/[^a-z0-9]/g, '-')
              .replace(/-+/g, '-')
              .replace(/^-|-$/g, '');

            // Common type mappings
            const typePatterns = {
              'feat': ['feature', 'add', 'new', 'implement'],
              'fix': ['fix', 'bug', 'patch', 'repair', 'resolve'],
              'docs': ['doc', 'documentation', 'readme'],
              'refactor': ['refactor', 'cleanup', 'improve'],
              'chore': ['update', 'maintenance', 'deps', 'dependency'],
              'test': ['test', 'spec'],
              'ci': ['ci', 'workflow', 'action'],
              'build': ['build', 'config']
            };

            // Try to infer type from branch name
            let suggestedType = 'feat'; // default
            for (const [type, keywords] of Object.entries(typePatterns)) {
              if (keywords.some(keyword => normalizedName.includes(keyword))) {
                suggestedType = type;
                break;
              }
            }

            suggestions.push(`${suggestedType}/${normalizedName}`);

            if (suggestedType !== 'feat') {
              suggestions.push(`feat/${normalizedName}`);
            }

            if (suggestedType !== 'fix') {
              suggestions.push(`fix/${normalizedName}`);
            }

            const suggestionMessage = `### ü§ñ Suggested Branch Names:

            Based on your branch name \`${branchName}\`, here are some conventional alternatives:

            ${suggestions.map(suggestion => `- \`${suggestion}\``).join('\n')}

            You can rename your branch using:
            \`\`\`bash
            git branch -m "${branchName}" "${suggestions[0]}"
            git push origin -u "${suggestions[0]}"
            git push origin --delete "${branchName}"
            \`\`\``;

            console.log('üí° Generated suggestions:', suggestions);
            console.log('üìù Suggestion message prepared');
