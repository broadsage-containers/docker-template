# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

name: "[Support] Auto Label Issues and PRs"

on:
  issues:
    types: [opened]
  pull_request:
    types: [opened]

# Use restrictive default permissions
permissions:
  contents: read

jobs:
  auto-label:
    runs-on: ubuntu-latest
    name: Automatically label issues and PRs
    # Job-level permissions for labeling
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Label based on title and content
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: github.actor != 'dependabot[bot]'
        with:
          script: |
            // Load configuration (JSON only for simplicity and reliability)
            let config;
            try {
              const fs = require('fs');
              const configFile = fs.readFileSync('.github/auto-label-config.json', 'utf8');
              config = JSON.parse(configFile);
              console.log('‚úÖ Loaded configuration from auto-label-config.json');
            } catch (error) {
              console.log('‚ö†Ô∏è No config file found or error parsing, using defaults');
              config = {
                enabled: true,
                max_labels: 3,
                label_rules: {
                  'bug': { keywords: ['fix:', 'bug', 'error', 'broken', 'crash', 'fail'], enabled: true, priority: 1 },
                  'enhancement': { keywords: ['feat:', 'feature', 'enhancement'], enabled: true, priority: 2 },
                  'security': { keywords: ['security', 'vulnerability', 'cve'], enabled: true, priority: 1 },
                  'dependencies': { keywords: ['dependabot', 'bump dependencies'], enabled: true, priority: 2 }
                },
                priority_rules: {
                  'priority-critical': { keywords: ['critical', 'urgent', 'severe', 'blocker'], enabled: true },
                  'priority-high': { keywords: ['high priority', 'important', 'breaking'], enabled: false }
                }
              };
            }

            if (!config.enabled) {
              console.log('üö´ Auto-labeling is disabled in config');
              return;
            }

            const issue = context.payload.issue || context.payload.pull_request;
            const isIssue = !!context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = (issue.body || '').toLowerCase();

            // Check for template indicators to avoid false positives
            const templateIndicators = config.exclusions?.template_indicators || [];
            const isTemplate = templateIndicators.some(indicator => 
              body.includes(indicator.toLowerCase())
            );

            if (isTemplate) {
              console.log('üö´ Template content detected, skipping auto-labeling to avoid false positives');
              return;
            }

            const labels = [];

            // Auto-label based on configuration with priority ordering
            const labelCandidates = [];
            for (const [label, rule] of Object.entries(config.label_rules || {})) {
              if (rule.enabled && rule.keywords && rule.keywords.some(keyword => title.includes(keyword) || body.includes(keyword))) {
                labelCandidates.push({ label, priority: rule.priority || 999 });
              }
            }

            // Sort by priority (lower number = higher priority) and add to labels
            labelCandidates.sort((a, b) => a.priority - b.priority);
            labels.push(...labelCandidates.map(candidate => candidate.label));

            // Additional rules for PRs
            if (!isIssue) {
              if (title.includes('wip') || title.includes('work in progress') || issue.draft) {
                labels.push('work-in-progress');
              }
              
              // Check if it's a dependency update
              if (title.includes('deps:') || title.includes('bump') || title.includes('update') || 
                  title.includes('upgrade') || body.includes('dependabot')) {
                if (!labels.includes('dependencies')) {
                  labels.push('dependencies');
                }
              }
            }

            // Priority labeling based on configuration
            for (const [label, rule] of Object.entries(config.priority_rules || {})) {
              if (rule.enabled && rule.keywords && rule.keywords.some(keyword => title.includes(keyword) || body.includes(keyword))) {
                labels.push(label);
              }
            }

            // Apply labels if any were found (limit based on config)
            const maxLabels = config.max_labels || 3;
            const uniqueLabels = [...new Set(labels)]; // Remove duplicates

            if (uniqueLabels.length > 0 && uniqueLabels.length <= maxLabels) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: uniqueLabels
              });
              
              console.log(`üè∑Ô∏è Applied labels: ${uniqueLabels.join(', ')}`);
            } else if (uniqueLabels.length > maxLabels) {
              // Apply only the highest priority labels
              const priorityLabels = uniqueLabels.slice(0, maxLabels);
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: priorityLabels
              });
              console.log(`üè∑Ô∏è Applied top priority labels (${priorityLabels.length}/${uniqueLabels.length}): ${priorityLabels.join(', ')}`);
            } else {
              console.log('‚ÑπÔ∏è No labels to apply based on content analysis');
            }

      - name: Welcome first-time contributors
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: github.event.action == 'opened' && github.actor != 'dependabot[bot]'
        with:
          script: |
            const issue = context.payload.issue || context.payload.pull_request;
            const isIssue = !!context.payload.issue;
            const author = issue.user.login;

            // Check if this is the user's first contribution
            const { data: authorIssues } = await github.rest.search.issuesAndPullRequests({
              q: `author:${author} repo:${context.repo.owner}/${context.repo.repo}`,
              sort: 'created',
              order: 'asc',
              per_page: 1
            });

            if (authorIssues.total_count === 1) {
              const welcomeMessage = isIssue ? 
                `üëã Welcome to the project, @${author}! Thanks for opening your first issue. 

                Please make sure you've provided all the necessary information in the issue template. 
                A maintainer will review your issue and respond as soon as possible.

                If you're interested in contributing code, check out our [contributing guidelines](../CONTRIBUTING.md).` :
                `üéâ Welcome @${author}! Thanks for your first pull request to this project!

                A maintainer will review your changes and provide feedback. Please make sure:
                - [ ] All tests are passing
                - [ ] You've followed our coding standards
                - [ ] Documentation is updated if needed

                Thanks for contributing! üôè`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: welcomeMessage
              });
            }
