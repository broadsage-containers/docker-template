name: "[CI/CD] Release Pipeline"

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: "Force build all containers"
        required: false
        default: false
        type: boolean
      containers_filter:
        description: "Comma-separated list of containers to build (e.g., nginx,apache)"
        required: false
        type: string
      push_images:
        description: "Push images to registry"
        required: false
        default: false
        type: boolean
  push:
    branches: [main]
  schedule:
    # Run weekly security scans
    - cron: "0 2 * * 0"

permissions:
  contents: read
  packages: write
  security-events: write
  statuses: write
  id-token: write
  attestations: write

# Prevent concurrent builds for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  BUILD_PLATFORMS: linux/amd64,linux/arm64
  COSIGN_EXPERIMENTAL: 1

jobs:
  # Matrix generation job to discover containers to build
  discover-containers:
    runs-on: ubuntu-latest
    name: Discover Modified Containers
    if: |
      (github.event_name == 'push' || 
       github.event_name == 'workflow_dispatch' ||
       github.event_name == 'schedule')
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      has_changes: ${{ steps.generate-matrix.outputs.has_changes }}
    permissions:
      contents: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # For push events, get last 2 commits for comparison
          fetch-depth: ${{ github.event_name == 'push' && 2 || 0 }}
          ref: ${{ github.ref }}

      - name: Get changed files
        if: github.event_name == 'push'
        id: changed-files
        uses: step-security/changed-files@95b56dadb92a30ca9036f16423fd3c088a71ee94 # v46.0.5
        with:
          files: |
            broadsage/**
          files_ignore: |
            **/*.md
            **/*.txt
            **/LICENSE
            .github/**

      - name: Generate build matrix
        id: generate-matrix
        env:
          CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
          FORCE_BUILD: ${{ github.event.inputs.force_build }}
          CONTAINERS_FILTER: ${{ github.event.inputs.containers_filter }}
        run: |
          set -euo pipefail

          echo "Debug: Changed files: $CHANGED_FILES"
          echo "Debug: Force build: $FORCE_BUILD"
          echo "Debug: Containers filter: $CONTAINERS_FILTER"
          echo "Debug: Event name: ${{ github.event_name }}"

          # Initialize containers array
          containers=()

          if [[ "$FORCE_BUILD" == "true" || "${{ github.event_name }}" == "schedule" ]]; then
            echo "Force build or scheduled run - discovering all containers"
            mapfile -t containers < <(find broadsage -name "Dockerfile" -type f | grep -E "broadsage/[^/]+/[^/]+/[^/]+/Dockerfile$" | sed 's|/Dockerfile||g' | sort)
          elif [[ -n "$CONTAINERS_FILTER" ]]; then
            echo "Using container filter: $CONTAINERS_FILTER"
            IFS=',' read -ra FILTER_ARRAY <<< "$CONTAINERS_FILTER"
            for filter in "${FILTER_ARRAY[@]}"; do
              filter=$(echo "$filter" | xargs) # trim whitespace
              mapfile -t found_containers < <(find broadsage -name "Dockerfile" -type f | grep -E "broadsage/$filter/[^/]+/[^/]+/Dockerfile$" | sed 's|/Dockerfile||g' | sort)
              containers+=("${found_containers[@]}")
            done
          else
            echo "Discovering containers from changed files"
            
            # Regular event handling for push events
            for file in $CHANGED_FILES; do
              # Extract container path pattern: broadsage/{app}/{version}/{platform}
              if [[ "$file" =~ ^broadsage/([^/]+)/([^/]+)/([^/]+)/ ]]; then
                container_path="broadsage/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}/${BASH_REMATCH[3]}"
                if [[ -f "$container_path/Dockerfile" ]]; then
                  containers+=("$container_path")
                fi
              fi
            done
          fi

          # Remove duplicates and create matrix
          if [[ ${#containers[@]} -gt 0 ]]; then
            mapfile -t unique_containers < <(printf "%s\n" "${containers[@]}" | sort -u)
            echo "Found containers to build: ${unique_containers[*]}"
            
            # Generate JSON matrix
            matrix_json="["
            for i in "${!unique_containers[@]}"; do
              container="${unique_containers[$i]}"
              app_name=$(echo "$container" | cut -d'/' -f2)
              version=$(echo "$container" | cut -d'/' -f3)
              platform=$(echo "$container" | cut -d'/' -f4)
              
              if [[ $i -gt 0 ]]; then
                matrix_json+=","
              fi
              
              matrix_json+="{\"container\":\"$container\",\"app\":\"$app_name\",\"version\":\"$version\",\"platform\":\"$platform\"}"
            done
            matrix_json+="]"
            
            echo "matrix={\"include\":$matrix_json}" >> "$GITHUB_OUTPUT"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "Generated matrix: $matrix_json"
          else
            echo "No containers found to build"
            echo "matrix={\"include\":[]}" >> "$GITHUB_OUTPUT"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

  # Lint and validate Dockerfiles
  lint-dockerfiles:
    runs-on: ubuntu-latest
    name: Lint Dockerfiles
    needs: discover-containers
    if: needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover-containers.outputs.matrix) }}
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@54c9adbab1582c2ef04b2016b760714a4bfde3cf # v3.1.0
        with:
          dockerfile: ${{ matrix.container }}/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@1b1aada464948af03b950897e5eb522f92603cc2 # v3.24.9
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint-${{ matrix.container }}

  # Build and test container images
  build-and-test:
    runs-on: ubuntu-latest
    name: Build & Test
    needs: [discover-containers, lint-dockerfiles]
    if: needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJSON(needs.discover-containers.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      security-events: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3.0.0

      - name: Log in to Container Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build metadata
        id: build-metadata
        env:
          CONTAINER: ${{ matrix.container }}
          APP: ${{ matrix.app }}
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          set -euo pipefail

          # Generate image name
          image_name="${REGISTRY}/${IMAGE_NAMESPACE}/${APP}"

          # Generate tags
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Production tags for main branch
            tags="${image_name}:${VERSION}-${PLATFORM}"
            tags="${tags},${image_name}:${VERSION}"
            if [[ "${VERSION}" =~ ^[0-9]+\.[0-9]+ ]]; then
              major_version=$(echo "${VERSION}" | cut -d'.' -f1)
              tags="${tags},${image_name}:${major_version}"
            fi
            tags="${tags},${image_name}:latest"
          else
            # Development tags for other events
            short_sha=$(echo "${{ github.sha }}" | cut -c1-7)
            tags="${image_name}:${VERSION}-${PLATFORM}-${short_sha}"
            tags="${tags},${image_name}:dev-${short_sha}"
          fi

          echo "image_name=${image_name}" >> "$GITHUB_OUTPUT"
          echo "tags=${tags}" >> "$GITHUB_OUTPUT"

          # Generate labels
          labels=$(cat <<EOF
          org.opencontainers.image.title=${APP}
          org.opencontainers.image.description=Enterprise-grade ${APP} container image
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${VERSION}
          org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=Apache-2.0
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.base.name=docker.io/bitnami/minideb:bookworm
          EOF
          )

          # Convert labels to single line for output
          labels_single_line=$(echo "$labels" | tr '\n' ',' | sed 's/,$//')
          echo "labels=${labels_single_line}" >> "$GITHUB_OUTPUT"

          echo "Generated metadata for ${CONTAINER}:"
          echo "  Image: ${image_name}"
          echo "  Tags: ${tags}"
          echo "  Labels: ${labels_single_line}"

      - name: Build and test image
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        id: build
        with:
          context: ${{ matrix.container }}
          file: ${{ matrix.container }}/Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: test-image:latest
          labels: ${{ steps.build-metadata.outputs.labels }}
          cache-from: type=gha,scope=build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}

      - name: Test container functionality
        run: |
          set -euo pipefail
          echo "Testing container functionality..."

          # Basic container health check
          docker run --rm --name test-container -d test-image:latest
          sleep 5

          # Check if container is running
          if docker ps | grep -q test-container; then
            echo "✅ Container is running successfully"
            docker stop test-container
          else
            echo "❌ Container failed to start"
            docker logs test-container || true
            exit 1
          fi

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # master
        with:
          image-ref: test-image:latest
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@1b1aada464948af03b950897e5eb522f92603cc2 # v3.24.9
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: trivy-${{ matrix.container }}

      - name: Generate security report
        if: always()
        run: |
          set -euo pipefail

          {
            echo "## 🔒 Security Scan Results"
            echo "**Container:** ${{ matrix.container }}"
            echo "**Image:** ${{ steps.build-metadata.outputs.image_name }}"
          } >> "$GITHUB_STEP_SUMMARY"

          if [[ -f "trivy-results.sarif" ]]; then
            # Parse SARIF results
            {
              critical_count=$(jq -r '.runs[0].results[]? | select(.level=="error") | .ruleId' trivy-results.sarif 2>/dev/null | wc -l || echo "0")
              high_count=$(jq -r '.runs[0].results[]? | select(.level=="warning") | .ruleId' trivy-results.sarif 2>/dev/null | wc -l || echo "0")
              
              echo "| Severity | Count |"
              echo "|----------|-------|"
              echo "| Critical | $critical_count |"
              echo "| High | $high_count |"
            } >> "$GITHUB_STEP_SUMMARY"
            
            if [[ "$critical_count" -gt 0 ]]; then
              echo "⚠️ **Critical vulnerabilities found!**" >> "$GITHUB_STEP_SUMMARY"
              echo "critical_vulns=true" >> "$GITHUB_OUTPUT"
            elif [[ "$high_count" -gt 0 ]]; then
              echo "⚠️ **High severity vulnerabilities found**" >> "$GITHUB_STEP_SUMMARY"
              echo "high_vulns=true" >> "$GITHUB_OUTPUT"
            else
              echo "✅ **No critical or high severity vulnerabilities found**" >> "$GITHUB_STEP_SUMMARY"
              echo "clean_scan=true" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "❌ **Security scan failed**" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Build multi-platform image (production)
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        id: push
        if: |
          (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.push_images == 'true')
        with:
          context: ${{ matrix.container }}
          file: ${{ matrix.container }}/Dockerfile
          platforms: ${{ env.BUILD_PLATFORMS }}
          push: true
          tags: ${{ steps.build-metadata.outputs.tags }}
          labels: ${{ steps.build-metadata.outputs.labels }}
          cache-from: type=gha,scope=build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}
          provenance: true
          sbom: true
          outputs: type=registry

      - name: Generate SBOM
        if: steps.push.outcome == 'success'
        uses: anchore/sbom-action@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0.20.5
        with:
          image: ${{ steps.build-metadata.outputs.image_name }}@${{ steps.push.outputs.digest }}
          format: "spdx-json"
          output-file: "sbom.spdx.json"

      - name: Attest SBOM
        if: steps.push.outcome == 'success'
        uses: actions/attest-sbom@5026d3663739160db546203eeaffa6aa1c51a4d6 # v1.4.1
        id: attest-sbom
        with:
          subject-name: ${{ steps.build-metadata.outputs.image_name }}
          subject-digest: ${{ steps.push.outputs.digest }}
          sbom-path: "sbom.spdx.json"
          push-to-registry: true

      - name: Install Cosign for additional signing
        if: steps.push.outcome == 'success'
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Sign container image with Cosign
        if: steps.push.outcome == 'success'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          image_ref="${{ steps.build-metadata.outputs.image_name }}@${{ steps.push.outputs.digest }}"

          # Sign the image
          cosign sign --yes "${image_ref}"

          # Verify the signature (optional verification step)
          cosign verify "${image_ref}" \
            --certificate-identity-regexp=".*" \
            --certificate-oidc-issuer-regexp=".*" || echo "Verification skipped for workflow context"

          echo "✅ Signed image: ${image_ref}"

      - name: Generate build artifacts summary
        if: steps.push.outcome == 'success'
        run: |
          image_ref="${{ steps.build-metadata.outputs.image_name }}@${{ steps.push.outputs.digest }}"

          {
            echo "## 📦 Build Artifacts for ${{ matrix.container }}"
            echo "**Image:** \`${image_ref}\`"
            echo "**Tags:** ${{ steps.build-metadata.outputs.tags }}"
            echo "**Digest:** \`${{ steps.push.outputs.digest }}\`"
            echo ""
            echo "### 🔒 Security Features Enabled"
            echo "- ✅ **SBOM Generated**: Software Bill of Materials created and attested"
            echo "- ✅ **Build Provenance**: Build metadata recorded automatically"
            echo "- ✅ **Image Signed**: Container image signed with Cosign"
            echo "- ✅ **GitHub Attestations**: Build provenance and SBOM attestations available"
            echo "- ✅ **Registry Integration**: Attestations pushed to container registry"
            echo ""
            echo "### 🔍 Verification Commands"
            echo '```bash'
            echo "# Verify signature"
            echo "cosign verify ${image_ref} --certificate-identity-regexp=\".*\" --certificate-oidc-issuer-regexp=\".*\""
            echo ""
            echo "# Download SBOM"
            echo "cosign download sbom ${image_ref}"
            echo ""
            echo "# View attestations"
            echo "gh attestation list --repo ${{ github.repository }}"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

  # Comprehensive build summary
  build-summary:
    runs-on: ubuntu-latest
    name: Build Summary
    needs: [discover-containers, build-and-test]
    if: always()
    permissions:
      statuses: write
      contents: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Generate build summary
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { data: workflowRun } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            let state = 'success';
            let description = 'All containers built and tested successfully!';

            if ('${{ needs.discover-containers.result }}' !== 'success') {
              state = 'error';
              description = 'Container discovery failed';
            } else if ('${{ needs.discover-containers.outputs.has_changes }}' === 'false') {
              state = 'success';
              description = 'No containers to build';
            } else if ('${{ needs.build-and-test.result }}' !== 'success') {
              state = 'error';
              description = 'Container build or tests failed';
            }

            // Determine SHA for status
            const sha = context.payload.pull_request?.head.sha || context.sha;

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: state,
              target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              description: description,
              context: 'Enterprise Container Pipeline'
            });

            core.summary.addHeading('🚀 Enterprise Container Build Summary');
            core.summary.addTable([
              [{data: 'Status', header: true}, {data: 'Value', header: true}],
              ['Build Status', state === 'success' ? '✅ Success' : '❌ Failed'],
              ['Containers Changed', '${{ needs.discover-containers.outputs.has_changes }}'],
              ['Workflow Run', `[#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`],
              ['Triggered By', '${{ github.actor }}'],
              ['Event', '${{ github.event_name }}']
            ]);
            await core.summary.write();
