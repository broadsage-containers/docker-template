# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: "[CI/CD] Release Pipeline"

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: "Force build all containers"
        required: false
        default: false
        type: boolean
      containers_filter:
        description: "Comma-separated list of containers to build (e.g., nginx,apache)"
        required: false
        type: string
      push_images:
        description: "Push images to registry"
        required: false
        default: false
        type: boolean
  push:
    branches: [main]
  schedule:
    # Run weekly security scans
    - cron: "0 2 * * 0"

# Use restrictive default permissions
permissions:
  contents: read

# Prevent concurrent builds for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  BUILD_PLATFORMS: linux/386,linux/amd64,linux/arm/v5,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x
  COSIGN_EXPERIMENTAL: 1

jobs:
  # Matrix generation job to discover containers to build
  discover-containers:
    runs-on: ubuntu-latest
    name: Discover Modified Containers
    # Job-level permissions for discovery
    permissions:
      contents: read
    if: |
      (github.event_name == 'push' || 
       github.event_name == 'workflow_dispatch' ||
       github.event_name == 'schedule')
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
      has_changes: ${{ steps.discover.outputs.has_changes }}
      container_count: ${{ steps.discover.outputs.container_count }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # For push events, get last 2 commits for comparison
          fetch-depth: ${{ github.event_name == 'push' && 2 || 0 }}
          ref: ${{ github.ref }}

      - name: Get changed files
        if: github.event_name == 'push'
        id: changed-files
        uses: step-security/changed-files@95b56dadb92a30ca9036f16423fd3c088a71ee94 # v46.0.5
        with:
          files: |
            library/**
          files_ignore: |
            **/*.md
            **/*.txt
            **/LICENSE
            .github/**

      - name: Discover containers using composite action
        id: discover
        uses: ./.github/actions/discover-containers
        with:
          event_type: ${{ github.event_name }}
          changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
          containers_filter: ${{ github.event.inputs.containers_filter }}
          force_all: ${{ github.event.inputs.force_build == 'true' || github.event_name == 'schedule' }}
          include_dev_versions: "true"

  # Generate platform matrix for builds
  generate-platform-matrix:
    runs-on: ubuntu-latest
    name: Generate Platform Matrix
    needs: discover-containers
    if: needs.discover-containers.outputs.has_changes == 'true'
    outputs:
      test_matrix: ${{ steps.platform-matrix.outputs.test_matrix }}
      test_platforms: ${{ steps.platform-matrix.outputs.test_platforms }}
      production_platforms: ${{ steps.platform-matrix.outputs.production_platforms }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Generate platform build matrix
        id: platform-matrix
        run: |
          # Define platform groups
          TEST_PLATFORMS="linux/amd64,linux/arm64"  # Fast platforms for testing
          PRODUCTION_PLATFORMS="${{ env.BUILD_PLATFORMS }}"  # All platforms for production
          # Get container matrix from previous job
          CONTAINERS='${{ needs.discover-containers.outputs.matrix }}'
          echo "Containers to process: $CONTAINERS"

          # Generate combined test matrix (containers × test platforms) using jq
          test_matrix=$(echo "$CONTAINERS" | jq -c --arg test_platforms "$TEST_PLATFORMS" '
            . as $containers |
            ($test_platforms | split(",")) as $platforms |
            [
              $containers[] as $container |
              $platforms[] as $test_platform |
              ($container + {"test_platform": $test_platform})
            ]
          ')

          echo "Test matrix: $test_matrix"

          {
            echo "test_matrix=$test_matrix"
            echo "test_platforms=$TEST_PLATFORMS"
            echo "production_platforms=$PRODUCTION_PLATFORMS"
          } >> "$GITHUB_OUTPUT"  # Lint and validate Dockerfiles
  lint-dockerfiles:
    runs-on: ubuntu-latest
    name: ${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}
    needs: [discover-containers, generate-platform-matrix]
    if: needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.discover-containers.outputs.matrix) }}
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@3fc49fb50d59c6ab7917a2e4195dba633e515b29 # v3.2.0
        with:
          dockerfile: ${{ matrix.container }}/Dockerfile
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        if: always()
        with:
          sarif_file: hadolint-results.sarif
          category: hadolint-${{ matrix.container }}

  # Build and test container images (fast platforms only)
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60 # Reduced timeout for test builds
    name: ${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}-${{ matrix.test_platform }}
    needs: [discover-containers, generate-platform-matrix, lint-dockerfiles]
    if: needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      max-parallel: 6 # Increased parallelism for platform matrix
      matrix:
        include: ${{ fromJSON(needs.generate-platform-matrix.outputs.test_matrix) }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      security-events: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Log in to Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build metadata
        id: build-metadata
        uses: ./.github/actions/build-metadata
        with:
          container_path: ${{ matrix.container }}
          app_name: ${{ matrix.app }}
          version: ${{ matrix.version }}
          platform: ${{ matrix.platform }}
          registry: ${{ env.REGISTRY }}
          image_namespace: ${{ env.IMAGE_NAMESPACE }}
          event_name: ${{ github.event_name }}
          ref: ${{ github.ref }}
          sha: ${{ github.sha }}
          is_production: "false"

      - name: Build and test container (platform-specific)
        id: build-test
        uses: ./.github/actions/docker-build
        with:
          container_path: ${{ matrix.container }}
          image_tags: ${{ steps.build-metadata.outputs.tags }}
          image_labels: ${{ steps.build-metadata.outputs.labels }}
          build_platforms: ${{ matrix.test_platform }}
          push_image: "false"
          load_image: "true"
          cache_scope: build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}-${{ matrix.test_platform }}
          enable_security_scan: ${{ matrix.test_platform == 'linux/amd64' && 'true' || 'false' }} # Only scan AMD64 to avoid duplication
          enable_attestations: "false"
          trivy_category: trivy-${{ matrix.container }}-${{ matrix.test_platform }}
          test_image_tag: test-image:latest

  # Build and push production images (all platforms)
  build-production:
    runs-on: ubuntu-latest
    timeout-minutes: 180 # Extended timeout for multi-platform production builds
    name: ${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}
    needs: [discover-containers, generate-platform-matrix, build-and-test]
    if: |
      needs.discover-containers.outputs.has_changes == 'true' &&
      needs.build-and-test.result == 'success' &&
      ((github.event_name == 'push' && github.ref == 'refs/heads/main') ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.push_images == 'true'))
    strategy:
      fail-fast: false
      max-parallel: 2 # Limit parallelism for resource-intensive multi-platform builds
      matrix:
        include: ${{ fromJSON(needs.discover-containers.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
      security-events: write
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Log in to Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build metadata
        id: build-metadata
        uses: ./.github/actions/build-metadata
        with:
          container_path: ${{ matrix.container }}
          app_name: ${{ matrix.app }}
          version: ${{ matrix.version }}
          platform: ${{ matrix.platform }}
          registry: ${{ env.REGISTRY }}
          image_namespace: ${{ env.IMAGE_NAMESPACE }}
          event_name: ${{ github.event_name }}
          ref: ${{ github.ref }}
          sha: ${{ github.sha }}
          is_production: "true"

      - name: Build and push production image (all platforms)
        id: build-production
        uses: ./.github/actions/docker-build
        with:
          container_path: ${{ matrix.container }}
          image_tags: ${{ steps.build-metadata.outputs.tags }}
          image_labels: ${{ steps.build-metadata.outputs.labels }}
          build_platforms: ${{ needs.generate-platform-matrix.outputs.production_platforms }}
          push_image: "true"
          load_image: "false"
          cache_scope: build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}-production
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          enable_security_scan: "false"
          enable_attestations: "true"

      # 4. Sign Container Image with Cosign
      - name: Sign container image with Cosign
        if: steps.build-production.outcome == 'success'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          image_ref="${{ steps.build-metadata.outputs.image_name }}@${{ steps.build-production.outputs.image_digest }}"

          echo "🔏 Signing container image: ${image_ref}"

          # Sign the image with enhanced metadata
          cosign sign --yes "${image_ref}" \
            --annotations="org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
            --annotations="org.opencontainers.image.revision=${{ github.sha }}" \
            --annotations="org.opencontainers.image.workflow=${{ github.workflow }}" \
            --annotations="org.opencontainers.image.run-id=${{ github.run_id }}" \
            --annotations="build.broadsage.com/container=${{ matrix.container }}" \
            --annotations="build.broadsage.com/platforms=${{ needs.generate-platform-matrix.outputs.production_platforms }}"

                    echo "✅ Image signed successfully"

      # 5. Generate SBOM with Anchore Syft
      - name: Generate SBOM
        if: steps.build-production.outcome == 'success'
        uses: anchore/sbom-action@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0.20.5
        with:
          image: ${{ steps.build-metadata.outputs.image_name }}@${{ steps.build-production.outputs.image_digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      # 6. Create GitHub SBOM Attestation
      - name: Create GitHub SBOM Attestation
        if: steps.build-production.outcome == 'success'
        uses: actions/attest-sbom@5026d3663739160db546203eeaffa6aa1c51a4d6 # v1.4.1
        with:
          subject-name: ${{ steps.build-metadata.outputs.image_name }}
          subject-digest: ${{ steps.build-production.outputs.image_digest }}
          sbom-path: sbom.spdx.json
          push-to-registry: true

      # 7. Create GitHub Build Provenance Attestation (SLSA Level 3)
      - name: Create GitHub Build Provenance Attestation
        if: steps.build-production.outcome == 'success'
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-name: ${{ steps.build-metadata.outputs.image_name }}
          subject-digest: ${{ steps.build-production.outputs.image_digest }}
          push-to-registry: true

      # 8. Verify Attestations

      - name: Verify signed image with strict policy
        if: steps.build-production.outcome == 'success'
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          image_ref="${{ steps.build-metadata.outputs.image_name }}@${{ steps.build-production.outputs.image_digest }}"
          expected_identity="https://github.com/${{ github.repository }}/.github/workflows/release-pipeline.yml@refs/heads/main"
          expected_issuer="https://token.actions.githubusercontent.com"

          echo "🔍 Verifying image signature with strict identity verification..."
          echo "Expected Identity: ${expected_identity}"
          echo "Expected Issuer: ${expected_issuer}"

          # Strict verification with exact identity match
          cosign verify "${image_ref}" \
            --certificate-identity="${expected_identity}" \
            --certificate-oidc-issuer="${expected_issuer}" \
            --output-file=verification-result.json

          echo "✅ Image signature verified successfully"

          # Verify attestations
          echo "🔍 Verifying SBOM attestation..."

          # Try GitHub SBOM attestation format first
          if cosign verify-attestation "${image_ref}" \
            --certificate-identity="${expected_identity}" \
            --certificate-oidc-issuer="${expected_issuer}" \
            --type=https://spdx.dev/Document 2>/dev/null; then
            echo "✅ GitHub SBOM attestation verified"
          elif cosign verify-attestation "${image_ref}" \
            --certificate-identity="${expected_identity}" \
            --certificate-oidc-issuer="${expected_issuer}" \
            --type=spdxjson 2>/dev/null; then
            echo "✅ Legacy SBOM attestation verified"
          else
            echo "⚠️ SBOM attestation verification failed but continuing"
          fi

          echo "✅ Image and attestations verified"

      - name: Generate build artifacts summary
        if: steps.build-production.outcome == 'success'
        run: |
          image_ref="${{ steps.build-metadata.outputs.image_name }}@${{ steps.build-production.outputs.image_digest }}"

          {
            echo "## 📦 Production Build Artifacts for ${{ matrix.container }}"
            echo "**Image:** \`${image_ref}\`"
            echo "**Tags:** ${{ steps.build-metadata.outputs.tags }}"
            echo "**Digest:** \`${{ steps.build-production.outputs.image_digest }}\`"
            echo "**Platforms:** \`${{ needs.generate-platform-matrix.outputs.production_platforms }}\`"
            echo ""
            echo "### 🔒 Security Features Enabled"
            echo "- ✅ **SBOM Generated**: Software Bill of Materials created and attested"
            echo "- ✅ **Build Provenance**: Build metadata recorded automatically"
            echo "- ✅ **Image Signed**: Container image signed with Cosign"
            echo "- ✅ **GitHub Attestations**: Build provenance and SBOM attestations available"
            echo "- ✅ **Registry Integration**: Attestations pushed to container registry"
            echo "- ✅ **Multi-Platform**: Built for ${{ needs.generate-platform-matrix.outputs.production_platforms }}"
            echo ""
            echo "### � Enhanced Security Features"
            echo "- ✅ **GitHub SBOM Attestation**: Software Bill of Materials via GitHub native system"
            echo "- ✅ **GitHub Build Provenance**: SLSA Level 3 compliant provenance via GitHub"
            echo "- ✅ **Cosign Image Signing**: Minimal signature verification for broad compatibility"
            echo "- ✅ **Keyless Verification**: Uses Sigstore for signature verification only"
            echo "- ✅ **Policy-Based Verification**: Supports Kubernetes admission controllers (signature-only)"
            echo "- ✅ **GitHub Native Attestations**: All attestations via GitHub's native system"
            echo "- ✅ **Registry Integration**: Attestations stored in GitHub's attestation registry"
            echo "- ✅ **Multi-Platform**: Built for ${{ needs.generate-platform-matrix.outputs.production_platforms }}"
            echo ""
            echo "### 🔍 Verification Commands"
            echo '```bash'
            echo "# 1. Verify image signature with Cosign (minimal)"
            echo "cosign verify ${image_ref} \\"
            echo "  --certificate-identity=\"https://github.com/${{ github.repository }}/.github/workflows/release-pipeline.yml@refs/heads/main\" \\"
            echo "  --certificate-oidc-issuer=\"https://token.actions.githubusercontent.com\""
            echo ""
            echo "# 2. Verify all GitHub attestations (SLSA Level 3)"
            echo "gh attestation verify oci://${image_ref} --repo ${{ github.repository }}"
            echo ""
            echo "# 3. Verify specific GitHub build provenance"
            echo "gh attestation verify oci://${image_ref} --repo ${{ github.repository }} \\"
            echo "  --predicate-type=https://slsa.dev/provenance/v1"
            echo ""
            echo "# 4. Verify specific GitHub SBOM attestation"
            echo "gh attestation verify oci://${image_ref} --repo ${{ github.repository }} \\"
            echo "  --predicate-type=https://in-toto.io/Statement/v0.1"
            echo ""
            echo "# 5. View all GitHub attestations"
            echo "gh attestation list --repo ${{ github.repository }} --digest ${{ steps.build-production.outputs.image_digest }}"
            echo ""
            echo "# 6. Use with Kubernetes admission controller (signature-only)"
            echo "kubectl apply -f https://github.com/${{ github.repository }}/raw/main/.cosign/consumer-policy.yaml"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

  # Comprehensive build summary
  build-summary:
    runs-on: ubuntu-latest
    name: Build Summary
    needs: [discover-containers, build-and-test, build-production]
    if: always()
    permissions:
      statuses: write
      contents: read
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Generate build summary
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const { data: workflowRun } = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            let state = 'success';
            let description = 'All containers built and tested successfully!';

            if ('${{ needs.discover-containers.result }}' !== 'success') {
              state = 'error';
              description = 'Container discovery failed';
            } else if ('${{ needs.discover-containers.outputs.has_changes }}' === 'false') {
              state = 'success';
              description = 'No containers to build';
            } else if ('${{ needs.build-and-test.result }}' !== 'success') {
              state = 'error';
              description = 'Container build or tests failed';
            } else if ('${{ needs.build-production.result }}' === 'skipped') {
              state = 'success';
              description = 'Containers tested successfully (production build skipped)';
            } else if ('${{ needs.build-production.result }}' !== 'success' && '${{ needs.build-production.result }}' !== 'skipped') {
              state = 'error';
              description = 'Production build failed';
            }

            // Determine SHA for status
            const sha = context.payload.pull_request?.head.sha || context.sha;

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: state,
              target_url: `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`,
              description: description,
              context: 'Enterprise Container Pipeline'
            });

            core.summary.addHeading('🚀 Enterprise Container Build Summary');
            core.summary.addTable([
              [{data: 'Status', header: true}, {data: 'Value', header: true}],
              ['Build Status', state === 'success' ? '✅ Success' : '❌ Failed'],
              ['Containers Changed', '${{ needs.discover-containers.outputs.has_changes }}'],
              ['Test Build Status', '${{ needs.build-and-test.result }}' === 'success' ? '✅ Passed' : '${{ needs.build-and-test.result }}' === 'skipped' ? '⏭️ Skipped' : '❌ Failed'],
              ['Production Build Status', '${{ needs.build-production.result }}' === 'success' ? '✅ Passed' : '${{ needs.build-production.result }}' === 'skipped' ? '⏭️ Skipped' : '❌ Failed'],
              ['Test Platforms', 'linux/amd64, linux/arm64'],
              ['Production Platforms', '${{ env.BUILD_PLATFORMS }}'],
              ['Workflow Run', `[#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`],
              ['Triggered By', '${{ github.actor }}'],
              ['Event', '${{ github.event_name }}']
            ]);
            await core.summary.write();
