# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
# SPDX-License-Identifier: Apache-2.0

---
name: "[Security] Image Verification & Monitoring"

on:
  # Daily verification at 6 AM UTC
  schedule:
    - cron: "0 6 * * *"

  # Manual trigger for immediate verification
  workflow_dispatch:
    inputs:
      specific_image:
        description: "Specific image to verify (optional). Format: ghcr.io/broadsage/nginx:latest"
        required: false
        type: string
      include_pr_images:
        description: "Include PR images in verification"
        required: false
        default: false
        type: boolean

# Restrictive permissions
permissions:
  contents: read
  actions: read
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  COSIGN_EXPERIMENTAL: 1

jobs:
  # Discover published images to verify
  discover-images:
    runs-on: ubuntu-latest
    name: Discover Published Images
    outputs:
      production_images: ${{ steps.discover.outputs.production_images }}
      pr_images: ${{ steps.discover.outputs.pr_images }}
    steps:
      - name: Harden the runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Install GitHub CLI
        run: |
          # GitHub CLI is pre-installed on GitHub runners
          gh --version

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Discover images to verify
        id: discover
        run: |
          set -euo pipefail

          if [[ -n "${{ github.event.inputs.specific_image }}" ]]; then
            echo "üéØ Verifying specific image: ${{ github.event.inputs.specific_image }}"
            production_images="[\"${{ github.event.inputs.specific_image }}\"]"
            pr_images="[]"
          else
            echo "üîç Discovering published images..."
            
            # Get all package versions for this repository
            production_images=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/orgs/${{ github.repository_owner }}/packages?package_type=container" \
              --jq "[.[] | select(.repository.full_name == \"${{ github.repository }}\") | 
                     .name as \$name |
                     (\"${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/\" + \$name + \":latest\")]")
            
            pr_images="[]"
            if [[ "${{ github.event.inputs.include_pr_images }}" == "true" ]]; then
              pr_images=$(gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/orgs/${{ github.repository_owner }}/packages?package_type=container" \
                --jq "[.[] | select(.repository.full_name == \"${{ github.repository }}\") | 
                       .name as \$name |
                       .package_versions[] | 
                       select(.metadata.container.tags[] | startswith(\"pr-\")) |
                       (\"${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/\" + \$name + \":\" + .metadata.container.tags[0])]")
            fi
          fi

          echo "production_images=${production_images}" >> "$GITHUB_OUTPUT"
          echo "pr_images=${pr_images}" >> "$GITHUB_OUTPUT"

          echo "üì¶ Production images to verify:"
          echo "${production_images}" | jq -r '.[]'

          if [[ "${pr_images}" != "[]" ]]; then
            echo "üî¨ PR images to verify:"
            echo "${pr_images}" | jq -r '.[]'
          fi

  # Verify production images with strict policies
  verify-production-images:
    runs-on: ubuntu-latest
    name: Verify Production Images
    needs: discover-images
    if: needs.discover-images.outputs.production_images != '[]'
    strategy:
      matrix:
        image: ${{ fromJSON(needs.discover-images.outputs.production_images) }}
      fail-fast: false
    steps:
      - name: Harden the runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0

      - name: Verify image signature with strict policy
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          image_ref="${{ matrix.image }}"
          expected_identity="https://github.com/${{ github.repository }}/.github/workflows/release-pipeline.yml@refs/heads/main"
          expected_issuer="https://token.actions.githubusercontent.com"

          echo "üîç Verifying production image: ${image_ref}"
          echo "Expected Identity: ${expected_identity}"
          echo "Expected Issuer: ${expected_issuer}"

          # Strict signature verification
          cosign verify "${image_ref}" \
            --certificate-identity="${expected_identity}" \
            --certificate-oidc-issuer="${expected_issuer}" \
            --output-file="verification-${image_ref//[^a-zA-Z0-9]/-}.json"

          echo "‚úÖ Signature verification passed"

      - name: Verify SBOM attestation
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          image_ref="${{ matrix.image }}"
          expected_identity="https://github.com/${{ github.repository }}/.github/workflows/release-pipeline.yml@refs/heads/main"
          expected_issuer="https://token.actions.githubusercontent.com"

          echo "üîç Verifying SBOM attestation for: ${image_ref}"

          # First try to verify GitHub SBOM attestation (actions/attest-sbom)
          if cosign verify-attestation "${image_ref}" \
            --certificate-identity="${expected_identity}" \
            --certificate-oidc-issuer="${expected_issuer}" \
            --type=https://spdx.dev/Document \
            --output-file="sbom-attestation-${image_ref//[^a-zA-Z0-9]/-}.json" 2>/dev/null; then
            echo "‚úÖ GitHub SBOM attestation verification passed"
          else
            echo "‚ö†Ô∏è GitHub SBOM attestation not found, trying legacy format..."
            
            # Try legacy SPDX JSON format
            if cosign verify-attestation "${image_ref}" \
              --certificate-identity="${expected_identity}" \
              --certificate-oidc-issuer="${expected_issuer}" \
              --type=spdxjson \
              --output-file="sbom-attestation-${image_ref//[^a-zA-Z0-9]/-}.json" 2>/dev/null; then
              echo "‚úÖ Legacy SBOM attestation verification passed"
            else
              echo "‚ö†Ô∏è No SBOM attestation found, but continuing verification"
              echo "Note: SBOM attestation is optional and may not be available for all images"
            fi
          fi

      - name: Download and analyze SBOM
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          image_ref="${{ matrix.image }}"

          echo "üìã Attempting to download SBOM for analysis..."

          if cosign download sbom "${image_ref}" --output-file="sbom-${image_ref//[^a-zA-Z0-9]/-}.spdx.json" 2>/dev/null; then
            echo "‚úÖ SBOM downloaded successfully"
            
            # Basic SBOM analysis
            if command -v jq >/dev/null 2>&1; then
              echo "üìä SBOM Summary:"
              echo "  - Document Name: $(jq -r '.name // "N/A"' "sbom-${image_ref//[^a-zA-Z0-9]/-}.spdx.json")"
              echo "  - Package Count: $(jq '[.packages[]? // empty] | length' "sbom-${image_ref//[^a-zA-Z0-9]/-}.spdx.json")"
              echo "  - Creation Date: $(jq -r '.creationInfo.created // "N/A"' "sbom-${image_ref//[^a-zA-Z0-9]/-}.spdx.json")"
            fi
          else
            echo "‚ö†Ô∏è No SBOM found attached to image, but continuing verification"
            echo "Note: SBOM is optional and may not be available for all images"
          fi

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # master
        with:
          image-ref: ${{ matrix.image }}
          format: "sarif"
          output: "trivy-results-${{ matrix.image }}.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        if: always()
        with:
          sarif_file: "trivy-results-${{ matrix.image }}.sarif"
          category: "image-verification-${{ matrix.image }}"

  # Verify PR images with relaxed policies
  verify-pr-images:
    runs-on: ubuntu-latest
    name: Verify PR Images
    needs: discover-images
    if: needs.discover-images.outputs.pr_images != '[]'
    strategy:
      matrix:
        image: ${{ fromJSON(needs.discover-images.outputs.pr_images) }}
      fail-fast: false
    steps:
      - name: Harden the runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0

      - name: Verify PR image signature
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          image_ref="${{ matrix.image }}"
          expected_issuer="https://token.actions.githubusercontent.com"

          echo "üîç Verifying PR image: ${image_ref}"

          # Relaxed verification for PR images
          cosign verify "${image_ref}" \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}/.github/workflows/pr-publish.yml@refs/heads/.*" \
            --certificate-oidc-issuer="${expected_issuer}"

          echo "‚úÖ PR image signature verification passed"

  # Generate verification summary
  verification-summary:
    runs-on: ubuntu-latest
    name: Verification Summary
    needs: [discover-images, verify-production-images, verify-pr-images]
    if: always()
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Generate summary
        run: |
          {
            echo "# üîç Image Verification Summary"
            echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo ""
            
            if [[ "${{ needs.verify-production-images.result }}" == "success" ]]; then
              echo "## ‚úÖ Production Images"
              echo "All production images passed verification with strict policies."
            elif [[ "${{ needs.verify-production-images.result }}" == "failure" ]]; then
              echo "## ‚ùå Production Images"
              echo "Some production images failed verification. Check job logs for details."
            else
              echo "## ‚ö™ Production Images"
              echo "No production images were verified (skipped or not found)."
            fi
            
            if [[ "${{ needs.verify-pr-images.result }}" == "success" ]]; then
              echo "## ‚úÖ PR Images"
              echo "All PR images passed verification."
            elif [[ "${{ needs.verify-pr-images.result }}" == "failure" ]]; then
              echo "## ‚ùå PR Images" 
              echo "Some PR images failed verification. Check job logs for details."
            else
              echo "## ‚ö™ PR Images"
              echo "No PR images were verified (skipped or not found)."
            fi
            
            echo ""
            echo "### üìä Verification Details"
            echo "- **Registry:** ${{ env.REGISTRY }}"
            echo "- **Namespace:** ${{ env.IMAGE_NAMESPACE }}"
            echo "- **Policy Location:** [.cosign/policy.yaml](.cosign/policy.yaml)"
            echo "- **Consumer Policy:** [.cosign/consumer-policy.yaml](.cosign/consumer-policy.yaml)"
            
          } >> "$GITHUB_STEP_SUMMARY"
