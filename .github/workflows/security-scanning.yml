# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
# SPDX-License-Identifier: Apache-2.0

---
name: "[Security] Comprehensive Scanning Pipeline"

on:
  schedule:
    # Run daily security scans at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      containers_filter:
        description: "Comma-separated list of containers to scan"
        required: false
        type: string
  push:
    branches: [main]
    paths:
      # Run security scans when container files change
      - "library/**/Dockerfile"
      - "library/**/docker-compose.yml"
      - "library/**/*.sh"
      - "library/**/prebuildfs/**"
      - "library/**/rootfs/**"
      # Run when workflow changes
      - ".github/workflows/security-scanning.yml"
      # Run when security configs change
      - "config/security/**"
      - ".trivyignore"
  pull_request:
    branches: [main]
    paths:
      # Only scan containers that changed in PRs
      - "library/**/Dockerfile"
      - "library/**/docker-compose.yml"
      - "library/**/*.sh"
      - "library/**/prebuildfs/**"
      - "library/**/rootfs/**"

permissions:
  contents: read
  security-events: write
  id-token: write
  packages: read

# Prevent concurrent security scans to avoid resource conflicts
concurrency:
  group: security-scanning-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  REGISTRY: ghcr.io

jobs:
  # First discover containers to scan
  discover-containers:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      has_changes: ${{ steps.generate-matrix.outputs.has_changes }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0 # Need full history for changed file detection

      - name: Detect changed containers (PR only)
        id: detect-changes
        if: github.event_name == 'pull_request'
        run: |
          set -euo pipefail
          echo "Detecting changed containers for PR optimization..."

          # Get changed files
          changed_files=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          echo "Changed files:"
          echo "$changed_files"

          # Extract changed container directories
          changed_containers=()
          while IFS= read -r file; do
            if [[ $file =~ ^library/([^/]+)/([^/]+)/([^/]+)/.*$ ]]; then
              container_path="${BASH_REMATCH[1]}/${BASH_REMATCH[2]}/${BASH_REMATCH[3]}"
              if [[ ! " ${changed_containers[*]} " =~ \ ${container_path}\  ]]; then
                changed_containers+=("${container_path}")
              fi
            fi
          done <<< "$changed_files"

          if [ ${#changed_containers[@]} -eq 0 ]; then
            echo "No container changes detected - will scan all containers"
            echo "changed_containers_filter=" >> "$GITHUB_OUTPUT"
          else
            # Join array with commas
            IFS=',' 
            changed_containers_filter="${changed_containers[*]}"
            echo "Changed containers detected: $changed_containers_filter"
            echo "changed_containers_filter=$changed_containers_filter" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate container matrix for security scanning
        id: generate-matrix
        env:
          CONTAINERS_FILTER: ${{ github.event.inputs.containers_filter }}
          PR_CHANGED_CONTAINERS: ${{ steps.detect-changes.outputs.changed_containers_filter }}
        run: |
          set -euo pipefail

          # Initialize containers array
          containers=()

          # For PR events, prioritize changed containers over manual filter
          if [[ "${{ github.event_name }}" == "pull_request" && -n "${PR_CHANGED_CONTAINERS:-}" ]]; then
            echo "Using PR-detected changed containers: ${PR_CHANGED_CONTAINERS}"
            IFS=',' read -ra FILTER_ARRAY <<< "${PR_CHANGED_CONTAINERS}"
            for filter in "${FILTER_ARRAY[@]}"; do
              mapfile -t found_containers < <(find library -name "Dockerfile" -type f | grep -E "library/${filter}/Dockerfile$" | sed 's|/Dockerfile||g' | sort)
              containers+=("${found_containers[@]}")
            done
          elif [[ -n "${CONTAINERS_FILTER:-}" ]]; then
            echo "Using manual container filter: ${CONTAINERS_FILTER}"
            IFS=',' read -ra FILTER_ARRAY <<< "${CONTAINERS_FILTER}"
            for filter in "${FILTER_ARRAY[@]}"; do
              filter=$(echo "$filter" | xargs) # trim whitespace
              mapfile -t found_containers < <(find library -name "Dockerfile" -type f | grep -E "library/${filter}/[^/]+/[^/]+/Dockerfile$" | sed 's|/Dockerfile||g' | sort)
              containers+=("${found_containers[@]}")
            done
          else
            echo "Discovering all containers for security scanning"
            mapfile -t containers < <(find library -name "Dockerfile" -type f | grep -E "library/[^/]+/[^/]+/[^/]+/Dockerfile$" | sed 's|/Dockerfile||g' | sort)
          fi

          # Create matrix
          if [[ ${#containers[@]} -gt 0 ]]; then
            mapfile -t unique_containers < <(printf "%s\n" "${containers[@]}" | sort -u)
            echo "Found containers to scan: ${unique_containers[*]}"
            
            # Generate JSON matrix
            matrix_json="["
            for i in "${!unique_containers[@]}"; do
              container="${unique_containers[$i]}"
              app_name=$(echo "${container}" | cut -d'/' -f2)
              version=$(echo "${container}" | cut -d'/' -f3)
              platform=$(echo "${container}" | cut -d'/' -f4)
              
              if [[ $i -gt 0 ]]; then
                matrix_json+=","
              fi
              
              matrix_json+="{\"container\":\"${container}\",\"app\":\"${app_name}\",\"version\":\"${version}\",\"platform\":\"${platform}\"}"
            done
            matrix_json+="]"
            
            echo "matrix=${matrix_json}" >> "$GITHUB_OUTPUT"
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "No containers found to scan"
            echo "matrix=[]" >> "$GITHUB_OUTPUT"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          fi

  security-scan:
    runs-on: ubuntu-latest
    needs: discover-containers
    if: needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      # Don't fail fast - we want all scans to complete even if some fail
      fail-fast: false
      # Limit concurrent jobs to prevent resource exhaustion
      max-parallel: 4
      matrix:
        containers: ${{ fromJson(needs.discover-containers.outputs.matrix) }}
        scanner: [trivy, syft]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Log in to Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check-image
        run: |
          set -euo pipefail
          image="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.containers.app }}:${{ matrix.containers.version }}-${{ matrix.containers.platform }}"
          echo "Checking if image exists: $image"

          if docker manifest inspect "$image" >/dev/null 2>&1; then
            echo "Image exists: $image"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "Image does not exist: $image"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip scanning - image not found
        if: steps.check-image.outputs.exists == 'false'
        run: |
          echo "⚠️ Skipping security scan for ${{ matrix.containers.app }}:${{ matrix.containers.version }}-${{ matrix.containers.platform }} - image not found in registry"
          echo "This may be expected if the image hasn't been built and pushed yet."

      - name: Run Trivy vulnerability scanner
        if: matrix.scanner == 'trivy' && steps.check-image.outputs.exists == 'true'
        uses: aquasecurity/trivy-action@062f2592684a31eb3aa050cc61e7ca1451cecd3d # v0.18.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.containers.app }}:${{ matrix.containers.version }}-${{ matrix.containers.platform }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM,LOW"

      - name: Generate SBOM with Syft
        if: matrix.scanner == 'syft' && steps.check-image.outputs.exists == 'true'
        uses: anchore/sbom-action@d94f46e13c6c62f59525ac9a1e147a99dc0b9bf5 # v0.17.0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.containers.app }}:${{ matrix.containers.version }}-${{ matrix.containers.platform }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SARIF results
        if: matrix.scanner != 'syft' && steps.check-image.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@df409f7d9260372bd5f19e5b04e83cb3c43714ae # v3.27.9
        with:
          sarif_file: ${{ matrix.scanner }}-results.sarif
          category: ${{ matrix.scanner }}-security-scan

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: security-scan-results-${{ matrix.containers.container }}-${{ matrix.scanner }}
          path: security-scan-results/
