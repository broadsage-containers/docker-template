# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
#
# SPDX-License-Identifier: Apache-2.0

---
name: "[CI/CD] Publish Approved PR"

on:
  workflow_run:
    workflows: ["[PR] Pull Request Validation"]
    types:
      - completed
    branches: [main]

# Use restrictive default permissions
permissions:
  contents: read

# Prevent concurrent builds
concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  BUILD_PLATFORMS: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v5,linux/386,linux/ppc64le,linux/s390x,linux/mips64le
  COSIGN_EXPERIMENTAL: 1

jobs:
  # Get PR information and security check
  pr-info-and-security:
    runs-on: ubuntu-latest
    name: PR Info and Security Check
    # Job-level permissions - read access for PR analysis
    permissions:
      contents: read
      pull-requests: read
    outputs:
      pr_number: ${{ steps.check-approval.outputs.pr_number }}
      pr_head_sha: ${{ steps.check-approval.outputs.pr_head_sha }}
      approved: ${{ steps.check-approval.outputs.approved }}
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Get PR info and check approval
        id: check-approval
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const { owner, repo } = context.repo;
            const headBranch = context.payload.workflow_run.head_branch;
            const headSha = context.payload.workflow_run.head_sha;

            // Find the PR associated with this workflow run
            const { data: prs } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              head: `${owner}:${headBranch}`
            });

            const pr = prs.find(pr => pr.head.sha === headSha);

            if (!pr) {
              core.setFailed('No open PR found for this workflow run');
              return;
            }

            const prNumber = pr.number;
            const prAuthor = pr.user.login;
            const prRepo = pr.head.repo.full_name;
            const trustedRepo = `${owner}/${repo}`;
            const isFromSameRepo = prRepo === trustedRepo;

            // Check if PR has the 'safe to test' label (manual approval for publishing)
            const hasSafeToTestLabel = pr.labels.some(
              label => label.name === 'safe to test'
            );

            // Check if author is a collaborator
            let isCollaborator = false;
            try {
              await github.rest.repos.checkCollaborator({
                owner,
                repo,
                username: prAuthor
              });
              isCollaborator = true;
            } catch (error) {
              isCollaborator = false;
            }

            // Approval logic: either from same repo + collaborator, or external + safe-to-test label
            const approved = (isFromSameRepo && isCollaborator) || hasSafeToTestLabel;

            core.info(`PR #${prNumber} Author: ${prAuthor}`);
            core.info(`PR Repository: ${prRepo}`);
            core.info(`Is from same repo: ${isFromSameRepo}`);
            core.info(`Has 'safe to test' label: ${hasSafeToTestLabel}`);
            core.info(`Is collaborator: ${isCollaborator}`);
            core.info(`Approved for publishing: ${approved}`);

            if (!approved) {
              core.info(
                'This PR is not approved for publishing. For external PRs, add the "safe to test" label after review.'
              );
            }

            // Set all outputs
            core.setOutput('pr_number', prNumber);
            core.setOutput('pr_head_sha', pr.head.sha);
            core.setOutput('approved', approved);

            return { pr_number: prNumber, pr_head_sha: pr.head.sha, approved: approved };

  # Matrix generation job to discover containers to build
  discover-containers:
    runs-on: ubuntu-latest
    name: Discover Modified Containers
    # Job-level permissions - only needs read access for discovery
    permissions:
      contents: read
    needs: [pr-info-and-security]
    if: needs.pr-info-and-security.outputs.approved == 'true'
    outputs:
      matrix: ${{ steps.discover.outputs.matrix }}
      has_changes: ${{ steps.discover.outputs.has_changes }}
      container_count: ${{ steps.discover.outputs.container_count }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout Repository (base branch)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          # Get the base branch commit
          base_sha=$(git merge-base origin/main HEAD)

          # Get changed files between base and current commit
          changed_files=$(git diff --name-only "$base_sha" HEAD | grep -E '^library/' | grep -v -E '\.(md|txt)$|LICENSE$|\.github/' || true)

          echo "Changed files:"
          echo "$changed_files"

          # Convert to space-separated for composite action
          changed_files_space=$(echo "$changed_files" | tr '\n' ' ' | sed 's/[[:space:]]*$//')
          echo "changed_files_space=$changed_files_space" >> "$GITHUB_OUTPUT"

      - name: Discover containers using composite action
        id: discover
        uses: ./.github/actions/discover-containers
        with:
          event_type: "pull_request"
          changed_files: ${{ steps.changed-files.outputs.changed_files_space }}
          containers_filter: ""
          force_all: "false"
          include_dev_versions: "true"
          base_ref: "main"

  # Build, test and publish container images
  build-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 120 # Extended timeout for multi-platform builds
    name: Build & Publish
    # Job-level permissions for build and publish operations
    permissions:
      contents: read # Required for checkout
      packages: write # Required for publishing to container registry
      security-events: write # Required for uploading security scan results
      attestations: write # Required for signing and generating attestations
      id-token: write # Required for OIDC token for signing
    needs: [pr-info-and-security, discover-containers]
    if: needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include: ${{ fromJSON(needs.discover-containers.outputs.matrix) }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Log in to Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build metadata
        id: build-metadata
        env:
          CONTAINER: ${{ matrix.container }}
          APP: ${{ matrix.app }}
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}
          PR_NUMBER: ${{ needs.pr-info-and-security.outputs.pr_number }}
        run: |
          set -euo pipefail

          # Generate image name
          image_name="${REGISTRY}/${IMAGE_NAMESPACE}/${APP}"

          # Generate development tags for approved PRs
          short_sha=$(echo "${{ github.event.workflow_run.head_sha }}" | cut -c1-7)
          tags="${image_name}:${VERSION}-${PLATFORM}-pr-${PR_NUMBER}-${short_sha}"
          tags="${tags},${image_name}:pr-${PR_NUMBER}-latest"
          tags="${tags},${image_name}:pr-${PR_NUMBER}-${VERSION}"

          echo "image_name=${image_name}" >> "$GITHUB_OUTPUT"
          echo "tags=${tags}" >> "$GITHUB_OUTPUT"

          # Generate comprehensive labels with enhanced metadata
          build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

          # Create labels array
          labels=""
          labels="${labels}org.opencontainers.image.title=${APP},"
          labels="${labels}org.opencontainers.image.description=Enterprise-grade ${APP} container image (approved PR),"
          labels="${labels}org.opencontainers.image.url=https://github.com/${{ github.repository }},"
          labels="${labels}org.opencontainers.image.source=https://github.com/${{ github.repository }},"
          labels="${labels}org.opencontainers.image.version=${VERSION},"
          labels="${labels}org.opencontainers.image.created=${build_date},"
          labels="${labels}org.opencontainers.image.revision=${{ github.event.workflow_run.head_sha }},"
          labels="${labels}org.opencontainers.image.licenses=Apache-2.0,"
          labels="${labels}org.opencontainers.image.vendor=${{ github.repository_owner }},"
          labels="${labels}org.opencontainers.image.base.name=docker.io/bitnami/minideb:bookworm,"
          labels="${labels}org.opencontainers.image.ref.name=pr-${PR_NUMBER},"
          labels="${labels}org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/${CONTAINER}/README.md,"
          labels="${labels}org.opencontainers.image.authors=Broadsage Engineering Team,"
          labels="${labels}io.broadsage.image.build-id=${{ github.run_id }},"
          labels="${labels}io.broadsage.image.build-number=${{ github.run_number }},"
          labels="${labels}io.broadsage.image.pr-number=${PR_NUMBER},"
          labels="${labels}io.broadsage.image.workflow=${{ github.workflow }},"
          labels="${labels}io.broadsage.image.platform=${PLATFORM},"
          labels="${labels}io.broadsage.image.architecture=${PLATFORM},"
          labels="${labels}io.broadsage.image.type=development,"
          labels="${labels}io.broadsage.image.security.signed=true"

          # Output labels without the trailing comma
          echo "labels=${labels}" >> "$GITHUB_OUTPUT"

          echo "Generated metadata for ${CONTAINER}:"
          echo "  Image: ${image_name}"
          echo "  Tags: ${tags}"

      - name: Build and publish PR container
        id: build-publish
        uses: ./.github/actions/docker-build
        with:
          container_path: ${{ matrix.container }}
          image_tags: ${{ steps.build-metadata.outputs.tags }}
          image_labels: ${{ steps.build-metadata.outputs.labels }}
          build_platforms: ${{ env.BUILD_PLATFORMS }}
          build_args: |
            TARGETPLATFORM=${{ env.BUILD_PLATFORMS }}
          push_image: "true"
          load_image: "false"
          cache_scope: build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          enable_security_scan: "true"
          enable_attestations: "true"

      # Generate SBOM for PR Images
      - name: Generate SBOM
        uses: anchore/sbom-action@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0.20.5
        with:
          image: ${{ steps.build-metadata.outputs.image_name }}@${{ steps.build-publish.outputs.image_digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      # Create GitHub SBOM Attestation
      - name: Create GitHub SBOM Attestation
        uses: actions/attest-sbom@5026d3663739160db546203eeaffa6aa1c51a4d6 # v1.4.1
        with:
          subject-name: ${{ steps.build-metadata.outputs.image_name }}
          subject-digest: ${{ steps.build-publish.outputs.image_digest }}
          sbom-path: sbom.spdx.json
          push-to-registry: true

      # Create GitHub Build Provenance Attestation (SLSA Level 3)
      - name: Create GitHub Build Provenance Attestation
        uses: actions/attest-build-provenance@1c608d11d69870c2092266b3f9a6f3abbf17002c # v1.4.3
        with:
          subject-name: ${{ steps.build-metadata.outputs.image_name }}
          subject-digest: ${{ steps.build-publish.outputs.image_digest }}
          push-to-registry: true

      - name: Sign container image with Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0

      - name: Sign the published Docker image with enhanced metadata
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          set -euo pipefail

          image_ref="${{ steps.build-metadata.outputs.image_name }}@${{ steps.build-publish.outputs.image_digest }}"
          pr_head_branch="${{ github.event.workflow_run.head_branch }}"

          echo "🔏 Signing PR container image: $image_ref"
          echo "PR Branch: $pr_head_branch"

          # Sign the image with PR-specific metadata
          cosign sign --yes "$image_ref" \
            --annotations="org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
            --annotations="org.opencontainers.image.revision=${{ github.sha }}" \
            --annotations="org.opencontainers.image.workflow=${{ github.workflow }}" \
            --annotations="org.opencontainers.image.run-id=${{ github.run_id }}" \
            --annotations="pr.broadsage.com/number=${{ needs.pr-info-and-security.outputs.pr_number }}" \
            --annotations="pr.broadsage.com/head-sha=${{ needs.pr-info-and-security.outputs.pr_head_sha }}" \
            --annotations="pr.broadsage.com/branch=${pr_head_branch}" \
            --annotations="build.broadsage.com/type=approved-pr"

          echo "✅ Image signed successfully"

          # Add enhanced build attestation with PR context
          echo "📋 Adding enhanced build attestation..."
          cosign attest --yes --predicate <(cat <<EOF
          {
            "buildType": "github-actions-pr",
            "builder": {
              "id": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            },
            "metadata": {
              "buildInvocationID": "${{ github.run_id }}-${{ github.run_number }}",
              "buildStartedOn": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "reproducible": false,
              "pr_number": "${{ needs.pr-info-and-security.outputs.pr_number }}",
              "pr_head_sha": "${{ needs.pr-info-and-security.outputs.pr_head_sha }}",
              "pr_branch": "${pr_head_branch}"
            },
            "materials": [
              {
                "uri": "${{ github.server_url }}/${{ github.repository }}",
                "digest": {
                  "sha1": "${{ github.sha }}"
                }
              }
            ]
          }
          EOF
          ) "$image_ref" || echo "⚠️ Attestation failed but continuing"

      - name: Verify PR image signature
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          image_ref="${{ steps.build-metadata.outputs.image_name }}@${{ steps.build-publish.outputs.image_digest }}"
          expected_identity_pattern="https://github.com/${{ github.repository }}/.github/workflows/pr-publish.yml@refs/heads/*"
          expected_issuer="https://token.actions.githubusercontent.com"

          echo "🔍 Verifying PR image signature..."
          echo "Expected Identity Pattern: ${expected_identity_pattern}"
          echo "Expected Issuer: ${expected_issuer}"

          # Verify with regex for PR branches
          cosign verify "${image_ref}" \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}/.github/workflows/pr-publish.yml@refs/heads/.*" \
            --certificate-oidc-issuer="${expected_issuer}" \
            --output-file=pr-verification-result.json

          echo "✅ PR image signature verified successfully"

      - name: Run security scan with Trivy
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # master
        with:
          image-ref: ${{ steps.build-metadata.outputs.image_name }}@${{ steps.build-publish.outputs.image_digest }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3.30.3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
          category: "trivy-approved-pr"

  # Update PR with build results
  update-pr-status:
    runs-on: ubuntu-latest
    name: Update PR Status
    # Job-level permissions for updating PR status
    permissions:
      pull-requests: write # Required for commenting on PRs
    needs: [pr-info-and-security, discover-containers, build-and-publish]
    if: always() && needs.pr-info-and-security.outputs.pr_number
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Update PR with results
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = '${{ needs.pr-info-and-security.outputs.pr_number }}';

            const securityResult = '${{ needs.pr-info-and-security.result }}';
            const discoverResult = '${{ needs.discover-containers.result }}';
            const buildResult = '${{ needs.build-and-publish.result }}';
            const hasChanges = '${{ needs.discover-containers.outputs.has_changes }}';
            const approved = '${{ needs.pr-info-and-security.outputs.approved }}';

            let message = '## 🔄 Workflow Run Results\n\n';

            if (approved === 'true') {
              if (hasChanges === 'true') {
                if (buildResult === 'success') {
                  message += '✅ **All checks passed!** Container images have been built and published.\n\n';
                  message += '🐳 **Published Images:**\n';
                  message += '- Images are available with tags: `pr-' + prNumber + '-latest`\n';
                  message += '- Full multi-platform builds completed\n';
                  message += '- Security scans passed\n';
                  message += '- Images signed with Cosign\n';
                } else {
                  message += '❌ **Build failed.** Please check the workflow logs for details.\n\n';
                }
              } else {
                message += 'ℹ️ **No container changes detected** - no builds were triggered.\n\n';
              }
            } else {
              message += '⚠️ **PR not approved for publishing.** Add the "safe to test" label to approve external PRs for publishing.\n\n';
            }

            message += '📋 **Status Summary:**\n';
            message += `- Security Check: ${securityResult === 'success' ? '✅' : '❌'}\n`;
            message += `- Container Discovery: ${discoverResult === 'success' ? '✅' : '❌'}\n`;
            message += `- Build & Publish: ${buildResult === 'success' ? '✅' : buildResult === 'skipped' ? '⏭️ Skipped' : '❌'}\n`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: message
            });
