name: '[CI/CD] Publish Approved PR'

on:
  workflow_run:
    workflows: ["[PR] Pull Request Validation"]
    types:
      - completed
    branches: [main]

permissions:
  contents: read
  packages: write
  pull-requests: write
  security-events: write
  statuses: write

# Prevent concurrent builds
concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  BUILD_PLATFORMS: linux/amd64,linux/arm64
  COSIGN_EXPERIMENTAL: 1

jobs:
  # Get PR information and security check
  pr-info-and-security:
    runs-on: ubuntu-latest
    name: PR Info and Security Check
    outputs:
      pr_number: ${{ steps.check-approval.outputs.pr_number }}
      pr_head_sha: ${{ steps.check-approval.outputs.pr_head_sha }}
      approved: ${{ steps.check-approval.outputs.approved }}
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Get PR info and check approval
        id: check-approval
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            const headBranch = context.payload.workflow_run.head_branch;
            const headSha = context.payload.workflow_run.head_sha;
            
            // Find the PR associated with this workflow run
            const { data: prs } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              head: `${owner}:${headBranch}`
            });
            
            const pr = prs.find(pr => pr.head.sha === headSha);
            
            if (!pr) {
              core.setFailed('No open PR found for this workflow run');
              return;
            }
            
            const prNumber = pr.number;
            const prAuthor = pr.user.login;
            const prRepo = pr.head.repo.full_name;
            const trustedRepo = `${owner}/${repo}`;
            const isFromSameRepo = prRepo === trustedRepo;
            
            // Check if PR has the 'safe to test' label (manual approval for publishing)
            const hasSafeToTestLabel = pr.labels.some(
              label => label.name === 'safe to test'
            );
            
            // Check if author is a collaborator
            let isCollaborator = false;
            try {
              await github.rest.repos.checkCollaborator({
                owner,
                repo,
                username: prAuthor
              });
              isCollaborator = true;
            } catch (error) {
              isCollaborator = false;
            }
            
            // Approval logic: either from same repo + collaborator, or external + safe-to-test label
            const approved = (isFromSameRepo && isCollaborator) || hasSafeToTestLabel;
            
            core.info(`PR #${prNumber} Author: ${prAuthor}`);
            core.info(`PR Repository: ${prRepo}`);
            core.info(`Is from same repo: ${isFromSameRepo}`);
            core.info(`Has 'safe to test' label: ${hasSafeToTestLabel}`);
            core.info(`Is collaborator: ${isCollaborator}`);
            core.info(`Approved for publishing: ${approved}`);
            
            if (!approved) {
              core.info(
                'This PR is not approved for publishing. For external PRs, add the "safe to test" label after review.'
              );
            }
            
            // Set all outputs
            core.setOutput('pr_number', prNumber);
            core.setOutput('pr_head_sha', pr.head.sha);
            core.setOutput('approved', approved);
            
            return { pr_number: prNumber, pr_head_sha: pr.head.sha, approved: approved };

  # Matrix generation job to discover containers to build
  discover-containers:
    runs-on: ubuntu-latest
    name: Discover Modified Containers
    needs: [pr-info-and-security]
    if: needs.pr-info-and-security.outputs.approved == 'true'
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      has_changes: ${{ steps.generate-matrix.outputs.has_changes }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Repository (base branch)
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          # Get the base branch commit
          base_sha=$(git merge-base origin/main HEAD)
          
          # Get changed files between base and current commit
          changed_files=$(git diff --name-only "$base_sha" HEAD | grep -E '^broadsage/' | grep -v -E '\.(md|txt)$|LICENSE$|\.github/' || true)
          
          echo "Changed files:"
          echo "$changed_files"
          
          # Set output for the matrix generation step
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$changed_files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate build matrix
        id: generate-matrix
        run: |
          set -euo pipefail
          
          changed_files="${{ steps.changed-files.outputs.changed_files }}"
          
          echo "Debug: Changed files:"
          echo "$changed_files"
          
          # Initialize containers array
          containers=()
          
          echo "Discovering containers from changed files"
          
          # Process changed files
          while IFS= read -r file; do
            if [[ -n "$file" && "$file" =~ ^broadsage/([^/]+)/([^/]+)/([^/]+)/ ]]; then
              container_path="broadsage/${BASH_REMATCH[1]}/${BASH_REMATCH[2]}/${BASH_REMATCH[3]}"
              if [[ -f "$container_path/Dockerfile" ]]; then
                containers+=("$container_path")
              fi
            fi
          done <<< "$changed_files"
          
          # Remove duplicates and create matrix
          if [[ ${#containers[@]} -gt 0 ]]; then
            unique_containers=($(printf "%s\n" "${containers[@]}" | sort -u))
            echo "Found containers to build: ${unique_containers[*]}"
            
            # Generate JSON matrix
            matrix_json="["
            for i in "${!unique_containers[@]}"; do
              container="${unique_containers[$i]}"
              app_name=$(echo "$container" | cut -d'/' -f2)
              version=$(echo "$container" | cut -d'/' -f3)
              platform=$(echo "$container" | cut -d'/' -f4)
              
              if [[ $i -gt 0 ]]; then
                matrix_json+=","
              fi
              
              matrix_json+="{\"container\":\"$container\",\"app\":\"$app_name\",\"version\":\"$version\",\"platform\":\"$platform\"}"
            done
            matrix_json+="]"
            
            echo "matrix={\"include\":$matrix_json}" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Generated matrix: $matrix_json"
          else
            echo "No containers found to build"
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

  # Build, test and publish container images
  build-and-publish:
    runs-on: ubuntu-latest
    name: Build & Publish
    needs: [pr-info-and-security, discover-containers]
    if: needs.discover-containers.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix: ${{ fromJSON(needs.discover-containers.outputs.matrix) }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Log in to Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build metadata
        id: build-metadata
        env:
          CONTAINER: ${{ matrix.container }}
          APP: ${{ matrix.app }}
          VERSION: ${{ matrix.version }}
          PLATFORM: ${{ matrix.platform }}
          PR_NUMBER: ${{ needs.pr-info-and-security.outputs.pr_number }}
        run: |
          set -euo pipefail
          
          # Generate image name
          image_name="${REGISTRY}/${IMAGE_NAMESPACE}/${APP}"
          
          # Generate development tags for approved PRs
          short_sha=$(echo "${{ github.event.workflow_run.head_sha }}" | cut -c1-7)
          tags="${image_name}:${VERSION}-${PLATFORM}-pr-${PR_NUMBER}-${short_sha}"
          tags="${tags},${image_name}:pr-${PR_NUMBER}-latest"
          
          echo "image_name=${image_name}" >> $GITHUB_OUTPUT
          echo "tags=${tags}" >> $GITHUB_OUTPUT
          
          # Generate labels
          labels=$(cat <<EOF
          org.opencontainers.image.title=${APP}
          org.opencontainers.image.description=Enterprise-grade ${APP} container image (approved PR)
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${VERSION}
          org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          org.opencontainers.image.revision=${{ github.event.workflow_run.head_sha }}
          org.opencontainers.image.licenses=Apache-2.0
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.base.name=docker.io/bitnami/minideb:bookworm
          org.opencontainers.image.ref.name=pr-${PR_NUMBER}
          EOF
          )
          
          # Convert labels to single line for output
          labels_single_line=$(echo "$labels" | tr '\n' ',' | sed 's/,$//')
          echo "labels=${labels_single_line}" >> $GITHUB_OUTPUT
          
          echo "Generated metadata for ${CONTAINER}:"
          echo "  Image: ${image_name}"
          echo "  Tags: ${tags}"

      - name: Build and push Docker image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5.4.0
        id: build
        with:
          context: ${{ matrix.container }}
          file: ${{ matrix.container }}/Dockerfile
          platforms: ${{ env.BUILD_PLATFORMS }}
          push: true
          tags: ${{ steps.build-metadata.outputs.tags }}
          labels: ${{ steps.build-metadata.outputs.labels }}
          cache-from: type=gha,scope=build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=build-${{ matrix.app }}-${{ matrix.version }}-${{ matrix.platform }}

      - name: Generate SBOM
        uses: anchore/sbom-action@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0.20.5
        with:
          image: ${{ steps.build-metadata.outputs.image_name }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Sign container image with Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Sign the published Docker image
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ steps.build-metadata.outputs.image_name }}@${{ steps.build.outputs.digest }}

      - name: Run security scan with Trivy
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # master
        with:
          image-ref: ${{ steps.build-metadata.outputs.image_name }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@2d92b76c45b91eb80fc44c74ce3fce0ee94e8f9d # v3.30.0
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-approved-pr'

  # Update PR with build results
  update-pr-status:
    runs-on: ubuntu-latest
    name: Update PR Status
    needs: [pr-info-and-security, discover-containers, build-and-publish]
    if: always() && needs.pr-info-and-security.outputs.pr_number
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Update PR with results
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = '${{ needs.pr-info-and-security.outputs.pr_number }}';
            
            const securityResult = '${{ needs.pr-info-and-security.result }}';
            const discoverResult = '${{ needs.discover-containers.result }}';
            const buildResult = '${{ needs.build-and-publish.result }}';
            const hasChanges = '${{ needs.discover-containers.outputs.has_changes }}';
            const approved = '${{ needs.pr-info-and-security.outputs.approved }}';
            
            let message = '## 🔄 Workflow Run Results\n\n';
            
            if (approved === 'true') {
              if (hasChanges === 'true') {
                if (buildResult === 'success') {
                  message += '✅ **All checks passed!** Container images have been built and published.\n\n';
                  message += '🐳 **Published Images:**\n';
                  message += '- Images are available with tags: `pr-' + prNumber + '-latest`\n';
                  message += '- Full multi-platform builds completed\n';
                  message += '- Security scans passed\n';
                  message += '- Images signed with Cosign\n';
                } else {
                  message += '❌ **Build failed.** Please check the workflow logs for details.\n\n';
                }
              } else {
                message += 'ℹ️ **No container changes detected** - no builds were triggered.\n\n';
              }
            } else {
              message += '⚠️ **PR not approved for publishing.** Add the "safe to test" label to approve external PRs for publishing.\n\n';
            }
            
            message += '📋 **Status Summary:**\n';
            message += `- Security Check: ${securityResult === 'success' ? '✅' : '❌'}\n`;
            message += `- Container Discovery: ${discoverResult === 'success' ? '✅' : '❌'}\n`;
            message += `- Build & Publish: ${buildResult === 'success' ? '✅' : buildResult === 'skipped' ? '⏭️ Skipped' : '❌'}\n`;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: prNumber,
              body: message
            });
