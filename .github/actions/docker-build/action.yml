# SPDX-FileCopyrightText: Copyright (c) 2025 Broadsage <opensource@broadsage.com>
# SPDX-License-Identifier: Apache-2.0

---
name: "Docker Build and Push"
description: "Builds and optionally pushes Docker images with security scanning and attestations"

inputs:
  container_path:
    description: "Path to the container directory"
    required: true
  dockerfile_path:
    description: "Path to the Dockerfile (relative to container_path)"
    required: false
    default: "Dockerfile"
  image_tags:
    description: "Comma-separated list of image tags"
    required: true
  image_labels:
    description: "Comma-separated list of OCI labels"
    required: true
  build_platforms:
    description: "Target platforms for build"
    required: false
    default: "linux/amd64"
  push_image:
    description: "Whether to push the image to registry"
    required: false
    default: "false"
  load_image:
    description: "Whether to load image locally (for testing)"
    required: false
    default: "false"
  cache_scope:
    description: "Cache scope identifier"
    required: true
  registry_username:
    description: "Registry username for authentication"
    required: false
  registry_password:
    description: "Registry password for authentication"
    required: false
  enable_security_scan:
    description: "Whether to run security scan with Trivy"
    required: false
    default: "false"
  enable_attestations:
    description: "Whether to generate build attestations"
    required: false
    default: "false"
  trivy_category:
    description: "Category for Trivy SARIF upload (for CodeQL integration)"
    required: false
    default: "container-security"
  test_image_tag:
    description: "Tag for test image when load_image is true"
    required: false
    default: "test-image:latest"
  build_args:
    description: "Build arguments to pass to Docker build"
    required: false
    default: ""

outputs:
  image_digest:
    description: "Image digest from the build"
    value: ${{ steps.build.outputs.digest }}
  image_id:
    description: "Image ID from the build"
    value: ${{ steps.build.outputs.imageid }}
  metadata:
    description: "Build result metadata"
    value: ${{ steps.build.outputs.metadata }}
  security_scan_result:
    description: "Security scan result (passed/failed)"
    value: ${{ steps.security-scan.outputs.result }}

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.8.0
      with:
        install: true
        driver-opts: |
          network=host
        buildkitd-config-inline: |
          [worker.oci]
            max-parallelism = 1
          [worker.containerd]
            max-parallelism = 1

    - name: Log in to Container Registry
      if: inputs.push_image == 'true'
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      with:
        registry: ${{ inputs.registry_username && 'ghcr.io' || '' }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}

    - name: Build Docker image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      id: build
      with:
        context: ${{ inputs.container_path }}
        file: ${{ inputs.container_path }}/${{ inputs.dockerfile_path }}
        platforms: ${{ inputs.build_platforms }}
        build-args: ${{ inputs.build_args }}
        push: ${{ inputs.push_image }}
        load: ${{ inputs.load_image }}
        tags: ${{ inputs.load_image == 'true' && inputs.test_image_tag || inputs.image_tags }}
        labels: ${{ inputs.image_labels }}
        cache-from: type=gha,scope=${{ inputs.cache_scope }}
        cache-to: type=gha,mode=max,scope=${{ inputs.cache_scope }}
        provenance: ${{ inputs.enable_attestations }}
        sbom: ${{ inputs.enable_attestations }}

    - name: Test container functionality
      if: inputs.load_image == 'true'
      shell: bash
      run: |
        set -euo pipefail
        echo "Testing container functionality..."

        # Get the test image tag and detect platform
        TEST_IMAGE="${{ inputs.test_image_tag }}"
        BUILD_PLATFORMS="${{ inputs.build_platforms }}"
        HOST_ARCH=$(uname -m)

        echo "Host architecture: $HOST_ARCH"
        echo "Build platforms: $BUILD_PLATFORMS"

        # Check if we're building for the host platform or if we should use emulation
        NATIVE_PLATFORM=""
        if [[ "$HOST_ARCH" == "x86_64" && "$BUILD_PLATFORMS" == *"linux/amd64"* ]]; then
          NATIVE_PLATFORM="linux/amd64"
        elif [[ "$HOST_ARCH" == "aarch64" && "$BUILD_PLATFORMS" == *"linux/arm64"* ]]; then
          NATIVE_PLATFORM="linux/arm64"
        fi

        # Basic container health check with platform awareness
        echo "Starting container for health check..."

        if [[ -n "$NATIVE_PLATFORM" ]]; then
          echo "Testing native platform: $NATIVE_PLATFORM"
          CONTAINER_ID=$(docker run --rm -d --name test-container --platform="$NATIVE_PLATFORM" "$TEST_IMAGE" 2>/dev/null || true)
        else
          echo "Testing with emulation (multi-platform build detected)"
          # For multi-platform builds, try the first platform or skip heavy testing
          CONTAINER_ID=$(docker run --rm -d --name test-container "$TEST_IMAGE" 2>/dev/null || true)
        fi

        if [[ -n "$CONTAINER_ID" ]]; then
          # Wait a moment for container to start
          sleep 5
          
          # Check if container is still running
          if docker ps | grep -q test-container 2>/dev/null; then
            echo "‚úÖ Container is running successfully"
            docker stop test-container 2>/dev/null || true
          else
            echo "‚ùå Container exited - checking logs"
            docker logs test-container 2>/dev/null || echo "No logs available"
            # Don't fail for platform mismatch issues in multi-platform builds
            if [[ -z "$NATIVE_PLATFORM" ]]; then
              echo "‚ö†Ô∏è Platform mismatch detected, but this is expected for multi-platform builds"
            else
              exit 1
            fi
          fi
        else
          echo "‚ö†Ô∏è Container failed to start - checking basic image properties"
          
          # At least verify the image exists and has basic properties
          if docker inspect "$TEST_IMAGE" > /dev/null 2>&1; then
            echo "‚úÖ Image exists and can be inspected"
            
            # For multi-platform builds, skip intensive testing
            if [[ -z "$NATIVE_PLATFORM" ]]; then
              echo "‚úÖ Skipping runtime tests due to platform mismatch (multi-platform build)"
            else
              # Try a simple command if the container doesn't run as daemon
              if docker run --rm --platform="$NATIVE_PLATFORM" "$TEST_IMAGE" --version >/dev/null 2>&1; then
                echo "‚úÖ Container responds to --version command"
              elif docker run --rm --platform="$NATIVE_PLATFORM" "$TEST_IMAGE" --help >/dev/null 2>&1; then
                echo "‚úÖ Container responds to --help command"
              else
                echo "‚ö†Ô∏è Container doesn't respond to standard commands, but image is valid"
              fi
            fi
          else
            echo "‚ùå Image inspection failed"
            exit 1
          fi
        fi

    - name: Security scan with Trivy
      if: inputs.enable_security_scan == 'true' && inputs.load_image == 'true'
      id: security-scan
      uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # master
      with:
        image-ref: ${{ inputs.test_image_tag }}
        format: "sarif"
        output: "trivy-results.sarif"
      continue-on-error: true

    - name: Upload Trivy scan results
      if: inputs.enable_security_scan == 'true' && steps.security-scan.outcome != 'skipped'
      uses: github/codeql-action/upload-sarif@662472033e021d55d94146f66f6058822b0b39fd # v3.27.0
      with:
        sarif_file: "trivy-results.sarif"
        category: ${{ inputs.trivy_category }}
      continue-on-error: true

    - name: Generate security scan summary
      if: inputs.enable_security_scan == 'true'
      shell: bash
      run: |
        if [[ "${{ steps.security-scan.outcome }}" == "success" ]]; then
          echo "result=passed" >> "$GITHUB_OUTPUT"
          echo "‚úÖ **Security scan passed**" >> "$GITHUB_STEP_SUMMARY"
          echo "No critical vulnerabilities found in the container image." >> "$GITHUB_STEP_SUMMARY"
        elif [[ "${{ steps.security-scan.outcome }}" == "failure" ]]; then
          echo "result=failed" >> "$GITHUB_OUTPUT"
          echo "‚ùå **Security scan failed**" >> "$GITHUB_STEP_SUMMARY"
          echo "Critical vulnerabilities found. Please review the security report." >> "$GITHUB_STEP_SUMMARY"
        else
          echo "result=skipped" >> "$GITHUB_OUTPUT"
          echo "‚ö†Ô∏è **Security scan skipped**" >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Generate build summary
      shell: bash
      env:
        IMAGE_TAGS: ${{ inputs.image_tags }}
        IMAGE_DIGEST: ${{ steps.build.outputs.digest }}
        PLATFORMS: ${{ inputs.build_platforms }}
        PUSHED: ${{ inputs.push_image }}
      run: |
        {
          echo "## üê≥ Container Build Summary"
          echo "**Image Tags:** \`${IMAGE_TAGS}\`"
          echo "**Platforms:** \`${PLATFORMS}\`"
          echo "**Pushed to Registry:** \`${PUSHED}\`"
          
          if [[ -n "${IMAGE_DIGEST:-}" ]]; then
            echo "**Digest:** \`${IMAGE_DIGEST}\`"
          fi
          
          if [[ "${{ inputs.enable_security_scan }}" == "true" ]]; then
            echo ""
            echo "### üîí Security Scan"
            case "${{ steps.security-scan.outcome }}" in
              "success") echo "‚úÖ No critical vulnerabilities found" ;;
              "failure") echo "‚ùå Security issues detected - review required" ;;
              *) echo "‚ö†Ô∏è Security scan was skipped or failed to run" ;;
            esac
          fi
          
          if [[ "${{ inputs.enable_attestations }}" == "true" ]]; then
            echo ""
            echo "### üìã Build Attestations"
            echo "‚úÖ **SBOM Generated**: Software Bill of Materials created"
            echo "‚úÖ **Build Provenance**: Build metadata recorded"
          fi
          
        } >> "$GITHUB_STEP_SUMMARY"
